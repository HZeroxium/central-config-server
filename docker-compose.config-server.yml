services:
  # Kafka for Spring Cloud Bus
  kafka:
    image: bitnami/kafka:3.9
    container_name: config-demo-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - kafka_data_config_server:/bitnami/kafka

  # Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    image: hzeroxium/config-server:latest
    container_name: config-demo-server
    ports:
      - "8888:8888"
    environment:
      # - CONFIG_GIT_URI=file:///app/ztf-spring-cloud-config-server
      - CONFIG_GIT_URI=https://github.com/HZeroxium/ztf-spring-cloud-config-server.git
      - CONFIG_GIT_LABEL=master
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./ztf-spring-cloud-config-server:/app/ztf-spring-cloud-config-server
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sample Service
  sample-service:
    build:
      context: ./sample-service
      dockerfile: Dockerfile
    image: hzeroxium/sample-service:latest
    container_name: config-demo-client
    ports:
      - "8080:8080"
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - KAFKA_BROKERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scale Sample Service to 3 instances
  sample-service-2:
    build:
      context: ./sample-service
      dockerfile: Dockerfile
    image: hzeroxium/sample-service:latest
    container_name: config-demo-client-2
    ports:
      - "8081:8080"
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - KAFKA_BROKERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scale Sample Service to 3 instances
  sample-service-3:
    build:
      context: ./sample-service
      dockerfile: Dockerfile
    image: hzeroxium/sample-service:latest
    container_name: config-demo-client-3
    ports:
      - "8082:8080"
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - KAFKA_BROKERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=dev
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  kafbat-ui:
    image: ghcr.io/kafbat/kafka-ui:main
    container_name: kafbat-ui
    ports:
      - "8084:8080"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

    depends_on:
      kafka:
        condition: service_healthy


networks:
  default:
    name: config-demo-network
    driver: bridge

volumes:
  kafka_data_config_server:
