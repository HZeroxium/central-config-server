plugins {
  id("java")
  id("maven-publish")
  id("io.spring.dependency-management") version "1.1.6"
  id("org.springframework.boot") version "3.3.13" apply false
}

group = "com.vng.zing"
version = "0.1.0"

java {
  toolchain { languageVersion.set(JavaLanguageVersion.of(21)) }
  withSourcesJar()
}

repositories { mavenCentral() }

dependencyManagement {
  imports {
    mavenBom("org.springframework.boot:spring-boot-dependencies:3.3.13")
    mavenBom("org.springframework.cloud:spring-cloud-dependencies:2023.0.5")
  }
}

dependencies {
  // Spring core & autoconfigure
  implementation("org.springframework.boot:spring-boot-autoconfigure:3.3.13")
  implementation("org.springframework.boot:spring-boot-starter:3.3.13")

  // Spring Web -> RestClient (synchronous) để tích hợp LoadBalancer filter
  implementation("org.springframework.boot:spring-boot-starter-web:3.3.13")

  // Spring Cloud starters
  implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")
  implementation("org.springframework.cloud:spring-cloud-starter-consul-discovery")
  implementation("org.springframework.cloud:spring-cloud-starter-config")
  implementation("org.springframework.cloud:spring-cloud-starter-bus-kafka")
  implementation("org.springframework.cloud:spring-cloud-commons")
  implementation("org.springframework.cloud:spring-cloud-context")

  // Spring Kafka (client utils)
  implementation("org.springframework.kafka:spring-kafka")

  // Configuration metadata generator
  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

  // Lombok (tuỳ chọn)
  compileOnly("org.projectlombok:lombok:1.18.32")
  annotationProcessor("org.projectlombok:lombok:1.18.32")
  testCompileOnly("org.projectlombok:lombok:1.18.32")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.32")

  testImplementation("org.springframework.boot:spring-boot-starter-test:3.3.13")
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      groupId = "com.vng.zing"
      artifactId = "zcm-spring-sdk-starter"
      version = project.version.toString()
    }
  }
  repositories { mavenLocal() }
}
