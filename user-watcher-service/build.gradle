// user-watcher-service/build.gradle

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.5'
    }
}

group = 'com.example'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations.all {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://packages.confluent.io/maven/" }
}

dependencies {
    // ZCM Spring SDK Starter
    implementation 'com.vng.zing:zcm-spring-sdk-starter:0.1.0'
    
    // User contracts library from Maven Local
    implementation 'com.example:user-contracts:1.0.0'
    
    // Thrift library for message processing
    implementation 'org.apache.thrift:libthrift:0.22.0'
    
    // Spring Kafka for messaging
    implementation 'org.springframework.kafka:spring-kafka:3.1.4'

    // Spring Boot starters with proper logging exclusions
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // Spring Cloud dependencies for ZCM SDK
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    
    // JPA for legacy entities (can be removed later if not needed)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    // H2 database driver for JPA
    runtimeOnly 'com.h2database:h2:2.2.224'
    
    // Jakarta API for annotations
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    // Spring Kafka
    implementation 'org.springframework.kafka:spring-kafka:3.1.4'
    implementation 'org.apache.kafka:kafka-clients:3.7.0'

    // Micrometer for metrics and profiling
    implementation 'io.micrometer:micrometer-core:1.13.15'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.13.15'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.3.13'
    implementation 'io.zipkin.brave:brave:6.0.3'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave:3.4.3'

    // Spring Cache + providers
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.lettuce:lettuce-core:6.3.2.RELEASE'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    
    // AOP for method-level profiling
    implementation 'org.springframework:spring-aop'
    implementation 'org.aspectj:aspectjweaver:1.9.21'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
    
    // Spring Boot Admin Client
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.3.4'

    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'org.testcontainers:mongodb:1.20.1'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.1.4'
    testImplementation 'io.micrometer:micrometer-test:1.13.15'
    
    // Integration test dependencies
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Source sets configuration
sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

// Compile Java configuration
compileJava {
    options.encoding = 'UTF-8'
}

bootJar {
    archiveFileName = 'user-watcher-service.jar'
}

// Docker build task
tasks.register('buildDocker', Exec) {
    group = 'docker'
    description = 'Build Docker image for user-watcher-service'
    dependsOn bootJar
    
    commandLine 'docker', 'build', '-t', 'hzeroxium/user-watcher-service:latest', '.'
    
    doFirst {
        println "Building Docker image for user-watcher-service..."
    }
}
