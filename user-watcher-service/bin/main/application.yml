# =========================
# user-watcher-service â€” application.yml
# =========================

server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: user-watcher-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  # Temporarily disable config server import
  # config:
  #   import: "optional:configserver:${CONFIG_SERVER_URL:http://config-server:8888}"
  cloud:
    consul:
      host: ${CONSUL_HOST:consul}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: true
        register: true
        service-name: ${spring.application.name}
        instance-id: ${spring.application.name}-${server.port}-${random.value}
        health-check-critical-timeout: 30s
        health-check-interval: 10s
        health-check-timeout: 3s
        prefer-ip-address: true
    bus:
      enabled: true
      kafka:
        bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    config:
      enabled: false
      fail-fast: false
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017/users}
    jpa:
      hibernate:
        ddl-auto: create-drop
      show-sql: false
      properties:
        hibernate:
          format_sql: true
          use_sql_comments: true
      database-platform: org.hibernate.dialect.H2Dialect
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      url: ${SPRING_DATA_REDIS_URL:redis://redis:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  datasource:
    url: ${JDBC_URL:jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1;MODE=LEGACY}
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  cache:
    cache-names: userById, usersByCriteria, countByCriteria
    type: caffeine
  autoconfigure:
    exclude: []
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: user-watcher-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        isolation.level: read_committed
    producer:
      acks: all
      retries: 2147483647
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        enable.idempotence: true
        delivery.timeout.ms: 120000
    listener:
      ack-mode: record
      missing-topics-fatal: false

app:
  name: user-watcher-service
  version: 1.0.0
  environment: ${ENVIRONMENT:development}
  persistence:
    type: ${PERSISTENCE_TYPE:mongo}
    mongodb-uri: ${MONGODB_URI:mongodb://localhost:27017/users}
    jdbc-url: ${JDBC_URL:jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1;MODE=LEGACY}
    jdbc-driver: org.h2.Driver
    jdbc-username: sa
    jdbc-password: password

kafka:
  topics:
    ping-request: ping.request
    ping-response: ping.response
    user-create-request: user.create.request
    user-create-response: user.create.response
    user-get-request: user.get.request
    user-get-response: user.get.response
    user-update-request: user.update.request
    user-update-response: user.update.response
    user-delete-request: user.delete.request
    user-delete-response: user.delete.response
    user-list-request: user.list.request
    user-list-response: user.list.response

# Spring Boot Admin Client Configuration
spring.boot.admin:
  client:
    url: ${SPRING_BOOT_ADMIN_URL:http://spring-boot-admin-server:8083}
    instance:
      name: ${spring.application.name}
      service-url: http://${HOSTNAME:localhost}:${server.port}
      management-url: http://${HOSTNAME:localhost}:${server.port}/actuator
      health-url: http://${HOSTNAME:localhost}:${server.port}/actuator/health
      info:
        app:
          name: ${spring.application.name}
          version: ${app.version}
          environment: ${app.environment}
        build:
          version: ${app.version}
        java:
          version: ${java.version}
        os:
          name: ${os.name}
          version: ${os.version}
        user:
          name: ${user.name}
        jvm:
          name: ${java.vm.name}
          version: ${java.vm.version}
          vendor: ${java.vm.vendor}

management:
  tracing:
    enabled: false # Disable Zipkin tracing
    sampling:
      probability: 0.0
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    prometheus:
      enabled: true
    metrics:
      enabled: true
    info:
      enabled: true
    env:
      enabled: true
    beans:
      enabled: true
    configprops:
      enabled: true
    loggers:
      enabled: true
    threaddump:
      enabled: true
    heapdump:
      enabled: true
    caches:
      enabled: true
  metrics:
    enable:
      cache: true
      jvm: true
      system: true
      web: true
      mongodb: true
      kafka: true
    tags:
      application: user-watcher-service
      service: user-watcher-service
      environment: ${ENVIRONMENT:development}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        http.client.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        http.client.requests: 0.5, 0.9, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        http.client.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
  health:
    mongodb:
      enabled: true
    redis:
      enabled: true
    kafka:
      enabled: true
    caches:
      enabled: true

# ZCM SDK Configuration - Custom features only (official Spring properties used directly)
zcm:
  sdk:
    # Custom SDK features without official Spring equivalents
    lb:
      policy: RR # Custom load balancing policy: Round-robin
    ping:
      enabled: true # Enable periodic heartbeat to control service
      fixed-delay: 30000 # Heartbeat interval in milliseconds
    control:
      url: ${CONFIG_CONTROL_URL:http://config-control-service:8889} # Control service URL
    bus:
      refresh:
        enabled: true # Enable listening for config refresh events
        topic: config-refresh # Kafka topic for refresh events

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.example.watcher: ${LOGGING_LEVEL_COM_EXAMPLE_WATCHER:DEBUG}
    com.example.user: ${LOGGING_LEVEL_COM_EXAMPLE_USER:DEBUG}
    com.vng.zing.zcm: DEBUG
    org.springframework.kafka: INFO
    org.apache.kafka: INFO
    org.springframework.web: INFO
    io.micrometer: INFO
    org.springframework.cache: DEBUG
    org.springframework.cloud: DEBUG
  config: classpath:log4j2-spring.xml
