spring:
  application:
    name: user-watcher-service
  cache:
    cache-names: userById, usersByCriteria, countByCriteria
    redis:
      enable-statistics: true
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      url: ${SPRING_DATA_REDIS_URL:redis://redis:6379}
  # Don't exclude Redis auto-configuration for redis-cache profile
  autoconfigure:
    exclude: []

  # Kafka configuration for RPC handling (inherited from default profile)
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: user-watcher-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        isolation.level: read_committed
    producer:
      acks: all
      retries: 2147483647
      properties:
        enable.idempotence: true
        delivery.timeout.ms: 120000
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      ack-mode: record
      missing-topics-fatal: false

app:
  name: user-watcher-service
  version: 1.0.0
  environment: ${ENVIRONMENT:development}
  persistence:
    type: ${PERSISTENCE_TYPE:mongo}

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,env,beans,configprops,loggers,threaddump,heapdump,cache
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
    prometheus:
      enabled: true
    metrics:
      enabled: true
  metrics:
    enable:
      cache: true
    tags:
      application: user-watcher-service
      service: user-watcher-service
      environment: ${ENVIRONMENT:development}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        http.client.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        http.client.requests: 0.5, 0.9, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        http.client.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: http://zipkin:9411/api/v2/spans
  prometheus:
    metrics:
      export:
        enabled: true
        step: 10s

# Logging configuration - using Log4j2
logging:
  level:
    com.example.watcher: DEBUG
    com.example.user: DEBUG
    org.springframework.web: INFO
    org.apache.kafka: INFO
    io.micrometer: INFO
    org.springframework.cache: DEBUG
  config: classpath:log4j2-spring.xml
