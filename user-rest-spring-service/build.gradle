plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Resilience4j for circuit breaker, retry, timeout
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0'

    // Micrometer for metrics
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // OpenAPI/Swagger UI for Spring Boot 3
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'org.apache.thrift:libthrift:0.22.0'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.mockito:mockito-core:5.12.0'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources/thrift']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

def thriftSrcDir = file('src/main/thrift')

tasks.register('generateThrift') {
    inputs.dir(thriftSrcDir)
    outputs.dir(file('build/generated-sources/thrift'))
    doLast {
        def outDir = file('build/generated-sources/thrift')
        outDir.mkdirs()
        if (thriftSrcDir.exists()) {
            thriftSrcDir.eachFileRecurse { f ->
                if (f.isFile() && f.name.endsWith('.thrift')) {
                    exec {
                        executable 'thrift'
                        args '-r', '--gen', 'java', '-out', outDir.absolutePath, f.absolutePath
                    }
                }
            }
        }
    }
}

compileJava.dependsOn tasks.named('generateThrift')

bootJar {
    archiveFileName = 'user-rest-spring-service.jar'
}

// Docker build task
tasks.register('buildDocker', Exec) {
    group = 'docker'
    description = 'Build Docker image for user-rest-spring-service'
    dependsOn bootJar
    
    commandLine 'docker', 'build', '-t', 'user-rest-spring-service:latest', '.'
    
    doFirst {
        println "Building Docker image for user-rest-spring-service..."
    }
}

