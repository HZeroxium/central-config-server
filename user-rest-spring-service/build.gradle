// user-rest-spring-service/build.gradle

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations.all {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://packages.confluent.io/maven/" }
}

dependencies {
    // User contracts library from Maven Local
    implementation 'com.example:user-contracts:1.0.0'
    testImplementation 'com.example:user-contracts:1.0.0'
    
    // Thrift library for client usage
    implementation 'org.apache.thrift:libthrift:0.22.0'
    
    // Spring Kafka for messaging
    implementation 'org.springframework.kafka:spring-kafka:3.1.4'
    
    // Spring Boot starters with proper logging exclusions
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Resilience4j for circuit breaker, retry, timeout
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0'

    // Micrometer for metrics and profiling
    implementation 'io.micrometer:micrometer-core:1.13.15'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.13.15'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.3.13'
    implementation 'io.zipkin.brave:brave:6.0.3'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave:3.4.3'

    // Spring Cache + providers
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.lettuce:lettuce-core:6.3.2.RELEASE'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    
    // AOP for method-level profiling
    implementation 'org.springframework:spring-aop'
    implementation 'org.aspectj:aspectjweaver:1.9.21'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    // OpenAPI/Swagger UI for Spring Boot 3
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'org.testcontainers:mongodb:1.20.1'
    testImplementation 'org.testcontainers:postgresql:1.20.1'
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'io.micrometer:micrometer-test:1.13.15'
    
    // Integration test dependencies
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.4.0'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// E2E test task
tasks.register('e2eTest', Test) {
    group = 'verification'
    description = 'Run end-to-end tests against running system'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include 'com/example/rest/user/e2e/UserE2ESimpleTest.class'
    include 'com/example/rest/user/e2e/UserV2E2ESimpleTest.class'

    // Set timeout for tests
    timeout = Duration.ofMinutes(10)
    
    // Ensure system is running
    doFirst {
        println "Running E2E tests against running system..."
        println "Make sure to run 'docker-compose up -d' first!"

        // Check if service is running
        try {
            def response = new URL("http://10.40.30.233:28080/actuator/health").openConnection()
            if (response.responseCode != 200) {
                throw new GradleException("Service is not healthy. Please check docker-compose status.")
            }
        } catch (Exception e) {
            throw new GradleException("Service is not running. Please run 'docker-compose up -d' first.", e)
        }
    }
}

// Integration test task with Testcontainers
tasks.register('integrationTest', Test) {
    group = 'verification'
    description = 'Run integration tests with Testcontainers'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/e2e/UserE2ETest.class'
    
    doFirst {
        println "Running integration tests with Testcontainers..."
    }
}

// Source sets configuration - no longer need Thrift generation here
sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

// Compile Java configuration
compileJava {
    options.encoding = 'UTF-8'
}

bootJar {
    archiveFileName = 'user-rest-spring-service.jar'
}

// Docker build task
tasks.register('buildDocker', Exec) {
    group = 'docker'
    description = 'Build Docker image for user-rest-spring-service'
    dependsOn bootJar
    
    commandLine 'docker', 'build', '-t', 'hzeroxium/user-rest-spring-service:latest', '.'
    
    doFirst {
        println "Building Docker image for user-rest-spring-service..."
    }
}
