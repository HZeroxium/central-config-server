plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

// Inherit from parent project
group = 'com.example'
version = '1.0.0'

configurations.all {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'ch.qos.logback', module: 'logback-core'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

dependencies {
    // Shared Thrift definitions
    implementation project(':shared-thrift-definitions')
    
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Resilience4j for circuit breaker, retry, timeout
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0'

    // Micrometer for metrics and profiling
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.brave:brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    
    // AOP for method-level profiling
    implementation 'org.springframework:spring-aop'
    implementation 'org.aspectj:aspectjweaver'

    // OpenAPI/Swagger UI for Spring Boot 3
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'org.testcontainers:mongodb:1.20.1'
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'io.micrometer:micrometer-test:1.12.0'
    
    // Integration test dependencies
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation 'org.testcontainers:mongodb:1.20.1'
    testImplementation 'org.testcontainers:postgresql:1.20.1'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.rest-assured:json-schema-validator:5.4.0'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Source sets configuration - no longer need Thrift generation here
sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

// Compile Java configuration
compileJava {
    options.encoding = 'UTF-8'
    dependsOn ':shared-thrift-definitions:generateThrift'
}

bootJar {
    archiveFileName = 'user-rest-spring-service.jar'
}

// Docker build task
tasks.register('buildDocker', Exec) {
    group = 'docker'
    description = 'Build Docker image for user-rest-spring-service'
    dependsOn bootJar
    
    commandLine 'docker', 'build', '-t', 'hzeroxium/user-rest-spring-service:latest', '.'
    
    doFirst {
        println "Building Docker image for user-rest-spring-service..."
    }
}