# application.yml

server:
  port: 8083

spring:
  application:
    name: user-rest-spring-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  cache:
    cache-names: userById, usersByCriteria, countByCriteria
  autoconfigure:
    exclude: 
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration
  
  # Kafka configuration for Orchestrator
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    
    producer:
      acks: all
      batch-size: 65536          # 64KB
      linger-ms: 30
      compression-type: snappy
      retries: 2147483647
      properties:
        enable.idempotence: true
        delivery.timeout.ms: 120000
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # Transactional producer for EOS
      transaction-id-prefix: orchestrator-tx-
    
    consumer:
      group-id: user-update-orchestrator
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        partition.assignment.strategy: org.apache.kafka.clients.consumer.CooperativeStickyAssignor
        # Enhanced connection resilience
        reconnect.backoff.ms: 1000
        reconnect.backoff.max.ms: 10000
        retry.backoff.ms: 1000
        request.timeout.ms: 30000
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        max.poll.interval.ms: 300000
        # Connection pool settings
        connections.max.idle.ms: 540000
        # Security and reliability
        enable.auto.commit: false
        isolation.level: read_committed
    
    listener:
      ack-mode: record
      missing-topics-fatal: false


# Thrift client configuration
thrift:
  host: ${THRIFT_HOST:localhost}
  port: ${THRIFT_PORT:9090}
  timeout: 5000
  retry-attempts: 3

# Application configuration
app:
  name: user-rest-spring-service
  version: 1.0.0
  environment: ${ENVIRONMENT:development}

# Management and monitoring configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,env,beans,configprops,loggers,threaddump,heapdump,cache
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
    prometheus:
      enabled: true
    metrics:
      enabled: true
  metrics:
    enable:
      cache: true
    tags:
      application: user-rest-spring-service
      service: user-rest-spring-service
      environment: ${ENVIRONMENT:development}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        http.client.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        http.client.requests: 0.5, 0.9, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        http.client.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: http://zipkin:9411/api/v2/spans
  prometheus:
    metrics:
      export:
        enabled: true
        step: 10s

# Logging configuration - using Log4j2
logging:
  level:
    com.example.rest: DEBUG
    com.example.user: DEBUG
    org.springframework.web: DEBUG
    org.apache.thrift: DEBUG
    io.micrometer: DEBUG
  config: classpath:log4j2-spring.xml