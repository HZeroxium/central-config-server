/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  HeartbeatPayload
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Receives periodic heartbeat signals from running service instances.
This endpoint tracks instance liveness, detects configuration drift,
and can trigger automatic configuration refreshes.

**Public Endpoint:** No authentication required for SDK integration
**Drift Detection:** Compares current config hash with last applied hash
**Auto-Refresh:** Can trigger config refresh if drift is detected

 * @summary Process heartbeat from service instance
 */
export const processHeartbeat = (
    heartbeatPayload: HeartbeatPayload,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/heartbeat`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: heartbeatPayload, signal
    },
      options);
    }
  


export const getProcessHeartbeatMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processHeartbeat>>, TError,{data: HeartbeatPayload}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof processHeartbeat>>, TError,{data: HeartbeatPayload}, TContext> => {

const mutationKey = ['processHeartbeat'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processHeartbeat>>, {data: HeartbeatPayload}> = (props) => {
          const {data} = props ?? {};

          return  processHeartbeat(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessHeartbeatMutationResult = NonNullable<Awaited<ReturnType<typeof processHeartbeat>>>
    export type ProcessHeartbeatMutationBody = HeartbeatPayload
    export type ProcessHeartbeatMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Process heartbeat from service instance
 */
export const useProcessHeartbeat = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processHeartbeat>>, TError,{data: HeartbeatPayload}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof processHeartbeat>>,
        TError,
        {data: HeartbeatPayload},
        TContext
      > => {

      const mutationOptions = getProcessHeartbeatMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Simple health check to verify that the heartbeat controller is operational.
This endpoint is used for monitoring and load balancer health checks.

 * @summary Health check endpoint
 */
export const heartbeatHealth = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/heartbeat/health`, method: 'GET', signal
    },
      options);
    }
  



export const getHeartbeatHealthQueryKey = () => {
    return [
    `/api/heartbeat/health`
    ] as const;
    }

    
export const getHeartbeatHealthQueryOptions = <TData = Awaited<ReturnType<typeof heartbeatHealth>>, TError = ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHeartbeatHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof heartbeatHealth>>> = ({ signal }) => heartbeatHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HeartbeatHealthQueryResult = NonNullable<Awaited<ReturnType<typeof heartbeatHealth>>>
export type HeartbeatHealthQueryError = ErrorResponse


export function useHeartbeatHealth<TData = Awaited<ReturnType<typeof heartbeatHealth>>, TError = ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof heartbeatHealth>>,
          TError,
          Awaited<ReturnType<typeof heartbeatHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHeartbeatHealth<TData = Awaited<ReturnType<typeof heartbeatHealth>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof heartbeatHealth>>,
          TError,
          Awaited<ReturnType<typeof heartbeatHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHeartbeatHealth<TData = Awaited<ReturnType<typeof heartbeatHealth>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useHeartbeatHealth<TData = Awaited<ReturnType<typeof heartbeatHealth>>, TError = ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof heartbeatHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHeartbeatHealthQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



