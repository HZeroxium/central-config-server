/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteResponse,
  Entry,
  EphemeralRequest,
  EphemeralResponse,
  ListParams,
  ListResponse,
  LockRequest,
  LockResponse,
  PutRequest,
  PutResponse,
  ReleaseLockParams,
  SseEmitter,
  TxnRequest,
  TxnResponse,
  WatchParams,
  _DeleteParams
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const get = (
    key: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Entry>(
      {url: `/api/kv/${key}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetInfiniteQueryKey = (key?: string,) => {
    return [
    'infinite', `/api/kv/${key}`
    ] as const;
    }

export const getGetQueryKey = (key?: string,) => {
    return [
    `/api/kv/${key}`
    ] as const;
    }

    
export const getGetInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof get>>>, TError = unknown>(key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInfiniteQueryKey(key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetInfiniteQueryError = unknown


export function useGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof get>>>, TError = unknown>(
 key: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof get>>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof get>>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetInfinite<TData = InfiniteData<Awaited<ReturnType<typeof get>>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInfiniteQueryOptions(key,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = unknown>(key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueryKey(key);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(key, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetQueryError = unknown


export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
 key: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
 key: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQueryOptions(key,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const put = (
    key: string,
    putRequest: PutRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PutResponse>(
      {url: `/api/kv/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putRequest
    },
      options);
    }
  


export const getPutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof put>>, TError,{key: string;data: PutRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof put>>, TError,{key: string;data: PutRequest}, TContext> => {

const mutationKey = ['put'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof put>>, {key: string;data: PutRequest}> = (props) => {
          const {key,data} = props ?? {};

          return  put(key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMutationResult = NonNullable<Awaited<ReturnType<typeof put>>>
    export type PutMutationBody = PutRequest
    export type PutMutationError = unknown

    export const usePut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof put>>, TError,{key: string;data: PutRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof put>>,
        TError,
        {key: string;data: PutRequest},
        TContext
      > => {

      const mutationOptions = getPutMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const _delete = (
    key: string,
    params?: _DeleteParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteResponse>(
      {url: `/api/kv/${key}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{key: string;params?: _DeleteParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{key: string;params?: _DeleteParams}, TContext> => {

const mutationKey = ['_delete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof _delete>>, {key: string;params?: _DeleteParams}> = (props) => {
          const {key,params} = props ?? {};

          return  _delete(key,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof _delete>>>
    
    export type _DeleteMutationError = unknown

    export const useDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{key: string;params?: _DeleteParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof _delete>>,
        TError,
        {key: string;params?: _DeleteParams},
        TContext
      > => {

      const mutationOptions = getDeleteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const putEphemeral = (
    key: string,
    ephemeralRequest: EphemeralRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<EphemeralResponse>(
      {url: `/api/kv/ephemeral/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ephemeralRequest
    },
      options);
    }
  


export const getPutEphemeralMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEphemeral>>, TError,{key: string;data: EphemeralRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putEphemeral>>, TError,{key: string;data: EphemeralRequest}, TContext> => {

const mutationKey = ['putEphemeral'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEphemeral>>, {key: string;data: EphemeralRequest}> = (props) => {
          const {key,data} = props ?? {};

          return  putEphemeral(key,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutEphemeralMutationResult = NonNullable<Awaited<ReturnType<typeof putEphemeral>>>
    export type PutEphemeralMutationBody = EphemeralRequest
    export type PutEphemeralMutationError = unknown

    export const usePutEphemeral = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putEphemeral>>, TError,{key: string;data: EphemeralRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putEphemeral>>,
        TError,
        {key: string;data: EphemeralRequest},
        TContext
      > => {

      const mutationOptions = getPutEphemeralMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const transaction = (
    txnRequest: TxnRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TxnResponse>(
      {url: `/api/kv/txn`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: txnRequest, signal
    },
      options);
    }
  


export const getTransactionMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof transaction>>, TError,{data: TxnRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof transaction>>, TError,{data: TxnRequest}, TContext> => {

const mutationKey = ['transaction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof transaction>>, {data: TxnRequest}> = (props) => {
          const {data} = props ?? {};

          return  transaction(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TransactionMutationResult = NonNullable<Awaited<ReturnType<typeof transaction>>>
    export type TransactionMutationBody = TxnRequest
    export type TransactionMutationError = unknown

    export const useTransaction = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof transaction>>, TError,{data: TxnRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof transaction>>,
        TError,
        {data: TxnRequest},
        TContext
      > => {

      const mutationOptions = getTransactionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const acquireLock = (
    lockRequest: LockRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<LockResponse>(
      {url: `/api/kv/lock`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: lockRequest, signal
    },
      options);
    }
  


export const getAcquireLockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof acquireLock>>, TError,{data: LockRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof acquireLock>>, TError,{data: LockRequest}, TContext> => {

const mutationKey = ['acquireLock'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof acquireLock>>, {data: LockRequest}> = (props) => {
          const {data} = props ?? {};

          return  acquireLock(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AcquireLockMutationResult = NonNullable<Awaited<ReturnType<typeof acquireLock>>>
    export type AcquireLockMutationBody = LockRequest
    export type AcquireLockMutationError = unknown

    export const useAcquireLock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof acquireLock>>, TError,{data: LockRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof acquireLock>>,
        TError,
        {data: LockRequest},
        TContext
      > => {

      const mutationOptions = getAcquireLockMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const list = (
    params?: ListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ListResponse>(
      {url: `/api/kv`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getListInfiniteQueryKey = (params?: ListParams,) => {
    return [
    'infinite', `/api/kv`, ...(params ? [params]: [])
    ] as const;
    }

export const getListQueryKey = (params?: ListParams,) => {
    return [
    `/api/kv`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof list>>, ListParams['page']>, TError = unknown>(params?: ListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof list>>, QueryKey, ListParams['page']> = ({ signal, pageParam }) => list({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof list>>>
export type ListInfiniteQueryError = unknown


export function useListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof list>>, ListParams['page']>, TError = unknown>(
 params: undefined |  ListParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof list>>,
          TError,
          Awaited<ReturnType<typeof list>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof list>>, ListParams['page']>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof list>>,
          TError,
          Awaited<ReturnType<typeof list>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof list>>, ListParams['page']>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof list>>, ListParams['page']>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData, QueryKey, ListParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListQueryOptions = <TData = Awaited<ReturnType<typeof list>>, TError = unknown>(params?: ListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof list>>> = ({ signal }) => list(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListQueryResult = NonNullable<Awaited<ReturnType<typeof list>>>
export type ListQueryError = unknown


export function useList<TData = Awaited<ReturnType<typeof list>>, TError = unknown>(
 params: undefined |  ListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof list>>,
          TError,
          Awaited<ReturnType<typeof list>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useList<TData = Awaited<ReturnType<typeof list>>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof list>>,
          TError,
          Awaited<ReturnType<typeof list>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useList<TData = Awaited<ReturnType<typeof list>>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useList<TData = Awaited<ReturnType<typeof list>>, TError = unknown>(
 params?: ListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const watch = (
    params: WatchParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SseEmitter>(
      {url: `/api/kv/watch`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getWatchInfiniteQueryKey = (params?: WatchParams,) => {
    return [
    'infinite', `/api/kv/watch`, ...(params ? [params]: [])
    ] as const;
    }

export const getWatchQueryKey = (params?: WatchParams,) => {
    return [
    `/api/kv/watch`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getWatchInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof watch>>, WatchParams['page']>, TError = unknown>(params: WatchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWatchInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof watch>>, QueryKey, WatchParams['page']> = ({ signal, pageParam }) => watch({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WatchInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof watch>>>
export type WatchInfiniteQueryError = unknown


export function useWatchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof watch>>, WatchParams['page']>, TError = unknown>(
 params: WatchParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof watch>>,
          TError,
          Awaited<ReturnType<typeof watch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWatchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof watch>>, WatchParams['page']>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof watch>>,
          TError,
          Awaited<ReturnType<typeof watch>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWatchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof watch>>, WatchParams['page']>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useWatchInfinite<TData = InfiniteData<Awaited<ReturnType<typeof watch>>, WatchParams['page']>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData, QueryKey, WatchParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWatchInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getWatchQueryOptions = <TData = Awaited<ReturnType<typeof watch>>, TError = unknown>(params: WatchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getWatchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof watch>>> = ({ signal }) => watch(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type WatchQueryResult = NonNullable<Awaited<ReturnType<typeof watch>>>
export type WatchQueryError = unknown


export function useWatch<TData = Awaited<ReturnType<typeof watch>>, TError = unknown>(
 params: WatchParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof watch>>,
          TError,
          Awaited<ReturnType<typeof watch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWatch<TData = Awaited<ReturnType<typeof watch>>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof watch>>,
          TError,
          Awaited<ReturnType<typeof watch>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useWatch<TData = Awaited<ReturnType<typeof watch>>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useWatch<TData = Awaited<ReturnType<typeof watch>>, TError = unknown>(
 params: WatchParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof watch>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getWatchQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const releaseLock = (
    lockKey: string,
    params: ReleaseLockParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/kv/lock/${lockKey}`, method: 'DELETE',
        params
    },
      options);
    }
  


export const getReleaseLockMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof releaseLock>>, TError,{lockKey: string;params: ReleaseLockParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof releaseLock>>, TError,{lockKey: string;params: ReleaseLockParams}, TContext> => {

const mutationKey = ['releaseLock'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof releaseLock>>, {lockKey: string;params: ReleaseLockParams}> = (props) => {
          const {lockKey,params} = props ?? {};

          return  releaseLock(lockKey,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReleaseLockMutationResult = NonNullable<Awaited<ReturnType<typeof releaseLock>>>
    
    export type ReleaseLockMutationError = unknown

    export const useReleaseLock = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof releaseLock>>, TError,{lockKey: string;params: ReleaseLockParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof releaseLock>>,
        TError,
        {lockKey: string;params: ReleaseLockParams},
        TContext
      > => {

      const mutationOptions = getReleaseLockMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    