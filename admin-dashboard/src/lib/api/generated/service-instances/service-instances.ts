/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  ErrorResponse,
  FindAllServiceInstancesParams,
  UpdateRequest
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a specific service instance by service name and instance ID.

**Access Control:**
- Team members: Can view instances of services owned by their team
- Shared access: Can view instances of services shared with their team
- SYS_ADMIN: Can view all instances

 * @summary Get service instance by ID
 */
export const findByIdServiceInstance = (
    serviceName: string,
    instanceId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponse>(
      {url: `/api/service-instances/${serviceName}/${instanceId}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindByIdServiceInstanceInfiniteQueryKey = (serviceName?: string,
    instanceId?: string,) => {
    return [
    'infinite', `/api/service-instances/${serviceName}/${instanceId}`
    ] as const;
    }

export const getFindByIdServiceInstanceQueryKey = (serviceName?: string,
    instanceId?: string,) => {
    return [
    `/api/service-instances/${serviceName}/${instanceId}`
    ] as const;
    }

    
export const getFindByIdServiceInstanceInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByIdServiceInstance>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(serviceName: string,
    instanceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdServiceInstanceInfiniteQueryKey(serviceName,instanceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdServiceInstance>>> = ({ signal }) => findByIdServiceInstance(serviceName,instanceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && instanceId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdServiceInstanceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdServiceInstance>>>
export type FindByIdServiceInstanceInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdServiceInstanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdServiceInstance>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceInstance>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceInstance>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceInstanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdServiceInstance>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceInstance>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceInstance>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceInstanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdServiceInstance>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service instance by ID
 */

export function useFindByIdServiceInstanceInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdServiceInstance>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdServiceInstanceInfiniteQueryOptions(serviceName,instanceId,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByIdServiceInstanceQueryOptions = <TData = Awaited<ReturnType<typeof findByIdServiceInstance>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(serviceName: string,
    instanceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdServiceInstanceQueryKey(serviceName,instanceId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdServiceInstance>>> = ({ signal }) => findByIdServiceInstance(serviceName,instanceId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName && instanceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdServiceInstanceQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdServiceInstance>>>
export type FindByIdServiceInstanceQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdServiceInstance<TData = Awaited<ReturnType<typeof findByIdServiceInstance>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceInstance>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceInstance>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceInstance<TData = Awaited<ReturnType<typeof findByIdServiceInstance>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceInstance>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceInstance>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceInstance<TData = Awaited<ReturnType<typeof findByIdServiceInstance>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service instance by ID
 */

export function useFindByIdServiceInstance<TData = Awaited<ReturnType<typeof findByIdServiceInstance>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    instanceId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceInstance>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdServiceInstanceQueryOptions(serviceName,instanceId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing service instance.

**Required Permissions:**
- Team members: Can update instances of services owned by their team
- SYS_ADMIN: Can update any instance
- Updates include configuration hash, status, and drift information

 * @summary Update service instance
 */
export const updateServiceInstance = (
    serviceName: string,
    instanceId: string,
    updateRequest: UpdateRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponse>(
      {url: `/api/service-instances/${serviceName}/${instanceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRequest
    },
      options);
    }
  


export const getUpdateServiceInstanceMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateServiceInstance>>, TError,{serviceName: string;instanceId: string;data: UpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateServiceInstance>>, TError,{serviceName: string;instanceId: string;data: UpdateRequest}, TContext> => {

const mutationKey = ['updateServiceInstance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateServiceInstance>>, {serviceName: string;instanceId: string;data: UpdateRequest}> = (props) => {
          const {serviceName,instanceId,data} = props ?? {};

          return  updateServiceInstance(serviceName,instanceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateServiceInstanceMutationResult = NonNullable<Awaited<ReturnType<typeof updateServiceInstance>>>
    export type UpdateServiceInstanceMutationBody = UpdateRequest
    export type UpdateServiceInstanceMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update service instance
 */
export const useUpdateServiceInstance = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateServiceInstance>>, TError,{serviceName: string;instanceId: string;data: UpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateServiceInstance>>,
        TError,
        {serviceName: string;instanceId: string;data: UpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateServiceInstanceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Delete a service instance permanently.

**Required Permissions:**
- Team members: Can delete instances of services owned by their team
- SYS_ADMIN: Can delete any instance
- This action is irreversible

 * @summary Delete service instance
 */
export const deleteServiceInstance = (
    serviceName: string,
    instanceId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApiResponse>(
      {url: `/api/service-instances/${serviceName}/${instanceId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteServiceInstanceMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServiceInstance>>, TError,{serviceName: string;instanceId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteServiceInstance>>, TError,{serviceName: string;instanceId: string}, TContext> => {

const mutationKey = ['deleteServiceInstance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteServiceInstance>>, {serviceName: string;instanceId: string}> = (props) => {
          const {serviceName,instanceId} = props ?? {};

          return  deleteServiceInstance(serviceName,instanceId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteServiceInstanceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteServiceInstance>>>
    
    export type DeleteServiceInstanceMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete service instance
 */
export const useDeleteServiceInstance = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteServiceInstance>>, TError,{serviceName: string;instanceId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteServiceInstance>>,
        TError,
        {serviceName: string;instanceId: string},
        TContext
      > => {

      const mutationOptions = getDeleteServiceInstanceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a paginated list of service instances with optional filtering.

**Access Control:**
- Team members: Can view instances of services owned by their team
- Shared access: Can view instances of services shared with their team
- SYS_ADMIN: Can view all instances
- Results are automatically filtered based on user permissions

 * @summary List service instances with filters and pagination
 */
export const findAllServiceInstances = (
    params: FindAllServiceInstancesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponse>(
      {url: `/api/service-instances`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllServiceInstancesInfiniteQueryKey = (params?: FindAllServiceInstancesParams,) => {
    return [
    'infinite', `/api/service-instances`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindAllServiceInstancesQueryKey = (params?: FindAllServiceInstancesParams,) => {
    return [
    `/api/service-instances`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllServiceInstancesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllServiceInstances>>, FindAllServiceInstancesParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllServiceInstancesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllServiceInstancesInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllServiceInstances>>, QueryKey, FindAllServiceInstancesParams['page']> = ({ signal, pageParam }) => findAllServiceInstances({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllServiceInstancesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllServiceInstances>>>
export type FindAllServiceInstancesInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllServiceInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllServiceInstances>>, FindAllServiceInstancesParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceInstances>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllServiceInstances>>, FindAllServiceInstancesParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceInstances>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllServiceInstances>>, FindAllServiceInstancesParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List service instances with filters and pagination
 */

export function useFindAllServiceInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllServiceInstances>>, FindAllServiceInstancesParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData, QueryKey, FindAllServiceInstancesParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllServiceInstancesInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllServiceInstancesQueryOptions = <TData = Awaited<ReturnType<typeof findAllServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllServiceInstancesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllServiceInstances>>> = ({ signal }) => findAllServiceInstances(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllServiceInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllServiceInstances>>>
export type FindAllServiceInstancesQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllServiceInstances<TData = Awaited<ReturnType<typeof findAllServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceInstances<TData = Awaited<ReturnType<typeof findAllServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceInstances<TData = Awaited<ReturnType<typeof findAllServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List service instances with filters and pagination
 */

export function useFindAllServiceInstances<TData = Awaited<ReturnType<typeof findAllServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllServiceInstancesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



