/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  FindAllIamTeamsParams,
  FindByIdIamTeamParams,
  FindByMemberIamTeamParams,
  GetStatsIamTeamParams,
  IamTeamPageResponse,
  IamTeamResponse,
  IamTeamStatsResponse
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a paginated list of cached IAM team projections from Keycloak.
This endpoint is restricted to system administrators.

 * @summary List IAM teams
 */
export const findAllIamTeams = (
    params: FindAllIamTeamsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IamTeamPageResponse>(
      {url: `/api/iam/teams`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllIamTeamsInfiniteQueryKey = (params?: FindAllIamTeamsParams,) => {
    return [
    'infinite', `/api/iam/teams`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindAllIamTeamsQueryKey = (params?: FindAllIamTeamsParams,) => {
    return [
    `/api/iam/teams`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllIamTeamsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllIamTeams>>, FindAllIamTeamsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllIamTeamsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllIamTeamsInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllIamTeams>>, QueryKey, FindAllIamTeamsParams['page']> = ({ signal, pageParam }) => findAllIamTeams({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllIamTeamsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllIamTeams>>>
export type FindAllIamTeamsInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllIamTeamsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamTeams>>, FindAllIamTeamsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamTeams>>,
          TError,
          Awaited<ReturnType<typeof findAllIamTeams>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamTeamsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamTeams>>, FindAllIamTeamsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamTeams>>,
          TError,
          Awaited<ReturnType<typeof findAllIamTeams>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamTeamsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamTeams>>, FindAllIamTeamsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List IAM teams
 */

export function useFindAllIamTeamsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamTeams>>, FindAllIamTeamsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData, QueryKey, FindAllIamTeamsParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllIamTeamsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllIamTeamsQueryOptions = <TData = Awaited<ReturnType<typeof findAllIamTeams>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllIamTeamsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllIamTeamsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllIamTeams>>> = ({ signal }) => findAllIamTeams(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllIamTeamsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllIamTeams>>>
export type FindAllIamTeamsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllIamTeams<TData = Awaited<ReturnType<typeof findAllIamTeams>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamTeams>>,
          TError,
          Awaited<ReturnType<typeof findAllIamTeams>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamTeams<TData = Awaited<ReturnType<typeof findAllIamTeams>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamTeams>>,
          TError,
          Awaited<ReturnType<typeof findAllIamTeams>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamTeams<TData = Awaited<ReturnType<typeof findAllIamTeams>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List IAM teams
 */

export function useFindAllIamTeams<TData = Awaited<ReturnType<typeof findAllIamTeams>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamTeamsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamTeams>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllIamTeamsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve a specific IAM team by its ID from cached Keycloak projections.
This endpoint is restricted to system administrators.

 * @summary Get IAM team by ID
 */
export const findByIdIamTeam = (
    teamId: string,
    params: FindByIdIamTeamParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IamTeamResponse>(
      {url: `/api/iam/teams/${teamId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindByIdIamTeamInfiniteQueryKey = (teamId?: string,
    params?: FindByIdIamTeamParams,) => {
    return [
    'infinite', `/api/iam/teams/${teamId}`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindByIdIamTeamQueryKey = (teamId?: string,
    params?: FindByIdIamTeamParams,) => {
    return [
    `/api/iam/teams/${teamId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindByIdIamTeamInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamTeam>>, FindByIdIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdIamTeamInfiniteQueryKey(teamId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdIamTeam>>, QueryKey, FindByIdIamTeamParams['page']> = ({ signal, pageParam }) => findByIdIamTeam(teamId,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdIamTeamInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdIamTeam>>>
export type FindByIdIamTeamInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamTeam>>, FindByIdIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamTeam>>, FindByIdIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamTeam>>, FindByIdIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get IAM team by ID
 */

export function useFindByIdIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamTeam>>, FindByIdIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData, QueryKey, FindByIdIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdIamTeamInfiniteQueryOptions(teamId,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByIdIamTeamQueryOptions = <TData = Awaited<ReturnType<typeof findByIdIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdIamTeamQueryKey(teamId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdIamTeam>>> = ({ signal }) => findByIdIamTeam(teamId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdIamTeamQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdIamTeam>>>
export type FindByIdIamTeamQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdIamTeam<TData = Awaited<ReturnType<typeof findByIdIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamTeam<TData = Awaited<ReturnType<typeof findByIdIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamTeam<TData = Awaited<ReturnType<typeof findByIdIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get IAM team by ID
 */

export function useFindByIdIamTeam<TData = Awaited<ReturnType<typeof findByIdIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByIdIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdIamTeamQueryOptions(teamId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve team count statistics from cached IAM data.
This endpoint is restricted to system administrators.

 * @summary Get team statistics
 */
export const getStatsIamTeam = (
    params: GetStatsIamTeamParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IamTeamStatsResponse>(
      {url: `/api/iam/teams/stats`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetStatsIamTeamInfiniteQueryKey = (params?: GetStatsIamTeamParams,) => {
    return [
    'infinite', `/api/iam/teams/stats`, ...(params ? [params]: [])
    ] as const;
    }

export const getGetStatsIamTeamQueryKey = (params?: GetStatsIamTeamParams,) => {
    return [
    `/api/iam/teams/stats`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetStatsIamTeamInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamTeam>>, GetStatsIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: GetStatsIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsIamTeamInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsIamTeam>>, QueryKey, GetStatsIamTeamParams['page']> = ({ signal, pageParam }) => getStatsIamTeam({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsIamTeamInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsIamTeam>>>
export type GetStatsIamTeamInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetStatsIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamTeam>>, GetStatsIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamTeam>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamTeam>>, GetStatsIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamTeam>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamTeam>>, GetStatsIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get team statistics
 */

export function useGetStatsIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamTeam>>, GetStatsIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData, QueryKey, GetStatsIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStatsIamTeamInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStatsIamTeamQueryOptions = <TData = Awaited<ReturnType<typeof getStatsIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: GetStatsIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsIamTeamQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsIamTeam>>> = ({ signal }) => getStatsIamTeam(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsIamTeamQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsIamTeam>>>
export type GetStatsIamTeamQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetStatsIamTeam<TData = Awaited<ReturnType<typeof getStatsIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamTeam>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamTeam<TData = Awaited<ReturnType<typeof getStatsIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamTeam>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamTeam<TData = Awaited<ReturnType<typeof getStatsIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get team statistics
 */

export function useGetStatsIamTeam<TData = Awaited<ReturnType<typeof getStatsIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStatsIamTeamQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve all teams that contain a specific user as a member.
This endpoint is restricted to system administrators.

 * @summary List teams by member
 */
export const findByMemberIamTeam = (
    userId: string,
    params: FindByMemberIamTeamParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/iam/teams/by-member/${userId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindByMemberIamTeamInfiniteQueryKey = (userId?: string,
    params?: FindByMemberIamTeamParams,) => {
    return [
    'infinite', `/api/iam/teams/by-member/${userId}`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindByMemberIamTeamQueryKey = (userId?: string,
    params?: FindByMemberIamTeamParams,) => {
    return [
    `/api/iam/teams/by-member/${userId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindByMemberIamTeamInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByMemberIamTeam>>, FindByMemberIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByMemberIamTeamInfiniteQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByMemberIamTeam>>, QueryKey, FindByMemberIamTeamParams['page']> = ({ signal, pageParam }) => findByMemberIamTeam(userId,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByMemberIamTeamInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByMemberIamTeam>>>
export type FindByMemberIamTeamInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByMemberIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByMemberIamTeam>>, FindByMemberIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByMemberIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByMemberIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByMemberIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByMemberIamTeam>>, FindByMemberIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByMemberIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByMemberIamTeam>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByMemberIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByMemberIamTeam>>, FindByMemberIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List teams by member
 */

export function useFindByMemberIamTeamInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByMemberIamTeam>>, FindByMemberIamTeamParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData, QueryKey, FindByMemberIamTeamParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByMemberIamTeamInfiniteQueryOptions(userId,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByMemberIamTeamQueryOptions = <TData = Awaited<ReturnType<typeof findByMemberIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByMemberIamTeamQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByMemberIamTeam>>> = ({ signal }) => findByMemberIamTeam(userId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByMemberIamTeamQueryResult = NonNullable<Awaited<ReturnType<typeof findByMemberIamTeam>>>
export type FindByMemberIamTeamQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByMemberIamTeam<TData = Awaited<ReturnType<typeof findByMemberIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByMemberIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByMemberIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByMemberIamTeam<TData = Awaited<ReturnType<typeof findByMemberIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByMemberIamTeam>>,
          TError,
          Awaited<ReturnType<typeof findByMemberIamTeam>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByMemberIamTeam<TData = Awaited<ReturnType<typeof findByMemberIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List teams by member
 */

export function useFindByMemberIamTeam<TData = Awaited<ReturnType<typeof findByMemberIamTeam>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByMemberIamTeamParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByMemberIamTeam>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByMemberIamTeamQueryOptions(userId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



