/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApprovalDecisionPageResponse,
  ApprovalDecisionResponse,
  ErrorResponse,
  FindAllApprovalDecisionsParams,
  FindApprovalDecisionsByRequestIdParams
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a paginated list of approval decisions with optional filtering.

**Access Control:**
- Users can view decisions for requests they have access to
- SYS_ADMIN can view all decisions
- Results are automatically filtered based on user permissions

 * @summary List approval decisions
 */
export const findAllApprovalDecisions = (
    params?: FindAllApprovalDecisionsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApprovalDecisionPageResponse>(
      {url: `/api/approval-decisions`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllApprovalDecisionsQueryKey = (params?: FindAllApprovalDecisionsParams,) => {
    return [
    `/api/approval-decisions`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllApprovalDecisionsQueryOptions = <TData = Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params?: FindAllApprovalDecisionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllApprovalDecisionsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllApprovalDecisions>>> = ({ signal }) => findAllApprovalDecisions(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllApprovalDecisionsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllApprovalDecisions>>>
export type FindAllApprovalDecisionsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllApprovalDecisions<TData = Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: undefined |  FindAllApprovalDecisionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalDecisions>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalDecisions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalDecisions<TData = Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApprovalDecisionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalDecisions>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalDecisions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalDecisions<TData = Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApprovalDecisionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List approval decisions
 */

export function useFindAllApprovalDecisions<TData = Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApprovalDecisionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalDecisions>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllApprovalDecisionsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve a specific approval decision by its ID.

**Access Control:**
- Users can view decisions for requests they have access to
- SYS_ADMIN can view any decision

 * @summary Get approval decision by ID
 */
export const findApprovalDecisionById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApprovalDecisionResponse>(
      {url: `/api/approval-decisions/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindApprovalDecisionByIdQueryKey = (id?: string,) => {
    return [
    `/api/approval-decisions/${id}`
    ] as const;
    }

    
export const getFindApprovalDecisionByIdQueryOptions = <TData = Awaited<ReturnType<typeof findApprovalDecisionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApprovalDecisionByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApprovalDecisionById>>> = ({ signal }) => findApprovalDecisionById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindApprovalDecisionByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findApprovalDecisionById>>>
export type FindApprovalDecisionByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindApprovalDecisionById<TData = Awaited<ReturnType<typeof findApprovalDecisionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalDecisionById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalDecisionById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalDecisionById<TData = Awaited<ReturnType<typeof findApprovalDecisionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalDecisionById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalDecisionById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalDecisionById<TData = Awaited<ReturnType<typeof findApprovalDecisionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get approval decision by ID
 */

export function useFindApprovalDecisionById<TData = Awaited<ReturnType<typeof findApprovalDecisionById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindApprovalDecisionByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve all approval decisions for a specific approval request.

**Access Control:**
- Users can view decisions for requests they have access to
- SYS_ADMIN can view decisions for any request

 * @summary List decisions for a request
 */
export const findApprovalDecisionsByRequestId = (
    requestId: string,
    params?: FindApprovalDecisionsByRequestIdParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApprovalDecisionPageResponse>(
      {url: `/api/approval-decisions/request/${requestId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindApprovalDecisionsByRequestIdQueryKey = (requestId?: string,
    params?: FindApprovalDecisionsByRequestIdParams,) => {
    return [
    `/api/approval-decisions/request/${requestId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindApprovalDecisionsByRequestIdQueryOptions = <TData = Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(requestId: string,
    params?: FindApprovalDecisionsByRequestIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApprovalDecisionsByRequestIdQueryKey(requestId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>> = ({ signal }) => findApprovalDecisionsByRequestId(requestId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(requestId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindApprovalDecisionsByRequestIdQueryResult = NonNullable<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>>
export type FindApprovalDecisionsByRequestIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindApprovalDecisionsByRequestId<TData = Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 requestId: string,
    params: undefined |  FindApprovalDecisionsByRequestIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>,
          TError,
          Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalDecisionsByRequestId<TData = Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 requestId: string,
    params?: FindApprovalDecisionsByRequestIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>,
          TError,
          Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalDecisionsByRequestId<TData = Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 requestId: string,
    params?: FindApprovalDecisionsByRequestIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List decisions for a request
 */

export function useFindApprovalDecisionsByRequestId<TData = Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 requestId: string,
    params?: FindApprovalDecisionsByRequestIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalDecisionsByRequestId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindApprovalDecisionsByRequestIdQueryOptions(requestId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



