/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  FindAllIamUsersParams,
  FindByIdIamUserParams,
  FindByManagerIamUserParams,
  FindByTeamIamUserParams,
  GetStatsIamUserParams,
  IamUserResponse,
  IamUserStatsResponse,
  Page
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a paginated list of cached IAM user projections from Keycloak.
This endpoint is restricted to system administrators.

 * @summary List IAM users
 */
export const findAllIamUsers = (
    params: FindAllIamUsersParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Page>(
      {url: `/api/iam/users`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllIamUsersInfiniteQueryKey = (params?: FindAllIamUsersParams,) => {
    return [
    'infinite', `/api/iam/users`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindAllIamUsersQueryKey = (params?: FindAllIamUsersParams,) => {
    return [
    `/api/iam/users`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllIamUsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllIamUsers>>, FindAllIamUsersParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllIamUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllIamUsersInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllIamUsers>>, QueryKey, FindAllIamUsersParams['page']> = ({ signal, pageParam }) => findAllIamUsers({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllIamUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllIamUsers>>>
export type FindAllIamUsersInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllIamUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamUsers>>, FindAllIamUsersParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamUsers>>,
          TError,
          Awaited<ReturnType<typeof findAllIamUsers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamUsers>>, FindAllIamUsersParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamUsers>>,
          TError,
          Awaited<ReturnType<typeof findAllIamUsers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamUsers>>, FindAllIamUsersParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List IAM users
 */

export function useFindAllIamUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllIamUsers>>, FindAllIamUsersParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData, QueryKey, FindAllIamUsersParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllIamUsersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllIamUsersQueryOptions = <TData = Awaited<ReturnType<typeof findAllIamUsers>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllIamUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllIamUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllIamUsers>>> = ({ signal }) => findAllIamUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllIamUsersQueryResult = NonNullable<Awaited<ReturnType<typeof findAllIamUsers>>>
export type FindAllIamUsersQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllIamUsers<TData = Awaited<ReturnType<typeof findAllIamUsers>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamUsers>>,
          TError,
          Awaited<ReturnType<typeof findAllIamUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamUsers<TData = Awaited<ReturnType<typeof findAllIamUsers>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllIamUsers>>,
          TError,
          Awaited<ReturnType<typeof findAllIamUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllIamUsers<TData = Awaited<ReturnType<typeof findAllIamUsers>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List IAM users
 */

export function useFindAllIamUsers<TData = Awaited<ReturnType<typeof findAllIamUsers>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllIamUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllIamUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllIamUsersQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve a specific IAM user by their ID from cached Keycloak projections.
This endpoint is restricted to system administrators.

 * @summary Get IAM user by ID
 */
export const findByIdIamUser = (
    userId: string,
    params: FindByIdIamUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IamUserResponse>(
      {url: `/api/iam/users/${userId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindByIdIamUserInfiniteQueryKey = (userId?: string,
    params?: FindByIdIamUserParams,) => {
    return [
    'infinite', `/api/iam/users/${userId}`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindByIdIamUserQueryKey = (userId?: string,
    params?: FindByIdIamUserParams,) => {
    return [
    `/api/iam/users/${userId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindByIdIamUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamUser>>, FindByIdIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdIamUserInfiniteQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdIamUser>>, QueryKey, FindByIdIamUserParams['page']> = ({ signal, pageParam }) => findByIdIamUser(userId,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdIamUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdIamUser>>>
export type FindByIdIamUserInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamUser>>, FindByIdIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamUser>>, FindByIdIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamUser>>, FindByIdIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get IAM user by ID
 */

export function useFindByIdIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByIdIamUser>>, FindByIdIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData, QueryKey, FindByIdIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdIamUserInfiniteQueryOptions(userId,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByIdIamUserQueryOptions = <TData = Awaited<ReturnType<typeof findByIdIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdIamUserQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdIamUser>>> = ({ signal }) => findByIdIamUser(userId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdIamUserQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdIamUser>>>
export type FindByIdIamUserQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdIamUser<TData = Awaited<ReturnType<typeof findByIdIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamUser<TData = Awaited<ReturnType<typeof findByIdIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByIdIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdIamUser<TData = Awaited<ReturnType<typeof findByIdIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get IAM user by ID
 */

export function useFindByIdIamUser<TData = Awaited<ReturnType<typeof findByIdIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 userId: string,
    params: FindByIdIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdIamUserQueryOptions(userId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve user count statistics from cached IAM data.
This endpoint is restricted to system administrators.

 * @summary Get user statistics
 */
export const getStatsIamUser = (
    params: GetStatsIamUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<IamUserStatsResponse>(
      {url: `/api/iam/users/stats`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetStatsIamUserInfiniteQueryKey = (params?: GetStatsIamUserParams,) => {
    return [
    'infinite', `/api/iam/users/stats`, ...(params ? [params]: [])
    ] as const;
    }

export const getGetStatsIamUserQueryKey = (params?: GetStatsIamUserParams,) => {
    return [
    `/api/iam/users/stats`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetStatsIamUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamUser>>, GetStatsIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: GetStatsIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsIamUserInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsIamUser>>, QueryKey, GetStatsIamUserParams['page']> = ({ signal, pageParam }) => getStatsIamUser({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsIamUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsIamUser>>>
export type GetStatsIamUserInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetStatsIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamUser>>, GetStatsIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamUser>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamUser>>, GetStatsIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamUser>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamUser>>, GetStatsIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user statistics
 */

export function useGetStatsIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStatsIamUser>>, GetStatsIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData, QueryKey, GetStatsIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStatsIamUserInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStatsIamUserQueryOptions = <TData = Awaited<ReturnType<typeof getStatsIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: GetStatsIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatsIamUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatsIamUser>>> = ({ signal }) => getStatsIamUser(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStatsIamUserQueryResult = NonNullable<Awaited<ReturnType<typeof getStatsIamUser>>>
export type GetStatsIamUserQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useGetStatsIamUser<TData = Awaited<ReturnType<typeof getStatsIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamUser>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamUser<TData = Awaited<ReturnType<typeof getStatsIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatsIamUser>>,
          TError,
          Awaited<ReturnType<typeof getStatsIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStatsIamUser<TData = Awaited<ReturnType<typeof getStatsIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user statistics
 */

export function useGetStatsIamUser<TData = Awaited<ReturnType<typeof getStatsIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: GetStatsIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStatsIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStatsIamUserQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve all users belonging to a specific team from cached IAM data.
This endpoint is restricted to system administrators.

 * @summary List users by team
 */
export const findByTeamIamUser = (
    teamId: string,
    params: FindByTeamIamUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/iam/users/by-team/${teamId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindByTeamIamUserInfiniteQueryKey = (teamId?: string,
    params?: FindByTeamIamUserParams,) => {
    return [
    'infinite', `/api/iam/users/by-team/${teamId}`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindByTeamIamUserQueryKey = (teamId?: string,
    params?: FindByTeamIamUserParams,) => {
    return [
    `/api/iam/users/by-team/${teamId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindByTeamIamUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByTeamIamUser>>, FindByTeamIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByTeamIamUserInfiniteQueryKey(teamId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByTeamIamUser>>, QueryKey, FindByTeamIamUserParams['page']> = ({ signal, pageParam }) => findByTeamIamUser(teamId,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByTeamIamUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByTeamIamUser>>>
export type FindByTeamIamUserInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByTeamIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByTeamIamUser>>, FindByTeamIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByTeamIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByTeamIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByTeamIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByTeamIamUser>>, FindByTeamIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByTeamIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByTeamIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByTeamIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByTeamIamUser>>, FindByTeamIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List users by team
 */

export function useFindByTeamIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByTeamIamUser>>, FindByTeamIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData, QueryKey, FindByTeamIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByTeamIamUserInfiniteQueryOptions(teamId,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByTeamIamUserQueryOptions = <TData = Awaited<ReturnType<typeof findByTeamIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByTeamIamUserQueryKey(teamId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByTeamIamUser>>> = ({ signal }) => findByTeamIamUser(teamId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(teamId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByTeamIamUserQueryResult = NonNullable<Awaited<ReturnType<typeof findByTeamIamUser>>>
export type FindByTeamIamUserQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByTeamIamUser<TData = Awaited<ReturnType<typeof findByTeamIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByTeamIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByTeamIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByTeamIamUser<TData = Awaited<ReturnType<typeof findByTeamIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByTeamIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByTeamIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByTeamIamUser<TData = Awaited<ReturnType<typeof findByTeamIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List users by team
 */

export function useFindByTeamIamUser<TData = Awaited<ReturnType<typeof findByTeamIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 teamId: string,
    params: FindByTeamIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByTeamIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByTeamIamUserQueryOptions(teamId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve all users reporting to a specific manager from cached IAM data.
This endpoint is restricted to system administrators.

 * @summary List users by manager
 */
export const findByManagerIamUser = (
    managerId: string,
    params: FindByManagerIamUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/api/iam/users/by-manager/${managerId}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindByManagerIamUserInfiniteQueryKey = (managerId?: string,
    params?: FindByManagerIamUserParams,) => {
    return [
    'infinite', `/api/iam/users/by-manager/${managerId}`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindByManagerIamUserQueryKey = (managerId?: string,
    params?: FindByManagerIamUserParams,) => {
    return [
    `/api/iam/users/by-manager/${managerId}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindByManagerIamUserInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findByManagerIamUser>>, FindByManagerIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByManagerIamUserInfiniteQueryKey(managerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByManagerIamUser>>, QueryKey, FindByManagerIamUserParams['page']> = ({ signal, pageParam }) => findByManagerIamUser(managerId,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(managerId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByManagerIamUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findByManagerIamUser>>>
export type FindByManagerIamUserInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByManagerIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByManagerIamUser>>, FindByManagerIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByManagerIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByManagerIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByManagerIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByManagerIamUser>>, FindByManagerIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByManagerIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByManagerIamUser>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByManagerIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByManagerIamUser>>, FindByManagerIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List users by manager
 */

export function useFindByManagerIamUserInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findByManagerIamUser>>, FindByManagerIamUserParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData, QueryKey, FindByManagerIamUserParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByManagerIamUserInfiniteQueryOptions(managerId,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindByManagerIamUserQueryOptions = <TData = Awaited<ReturnType<typeof findByManagerIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByManagerIamUserQueryKey(managerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByManagerIamUser>>> = ({ signal }) => findByManagerIamUser(managerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(managerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByManagerIamUserQueryResult = NonNullable<Awaited<ReturnType<typeof findByManagerIamUser>>>
export type FindByManagerIamUserQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByManagerIamUser<TData = Awaited<ReturnType<typeof findByManagerIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByManagerIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByManagerIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByManagerIamUser<TData = Awaited<ReturnType<typeof findByManagerIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByManagerIamUser>>,
          TError,
          Awaited<ReturnType<typeof findByManagerIamUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByManagerIamUser<TData = Awaited<ReturnType<typeof findByManagerIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List users by manager
 */

export function useFindByManagerIamUser<TData = Awaited<ReturnType<typeof findByManagerIamUser>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 managerId: string,
    params: FindByManagerIamUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByManagerIamUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByManagerIamUserQueryOptions(managerId,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



