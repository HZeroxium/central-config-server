/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  FindAllServiceSharesParams,
  ServiceShareCreateRequest,
  ServiceSharePageResponse,
  ServiceShareResponse
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a paginated list of service shares.

**Access Control:**
- Team members: Can view shares for services owned by their team
- SYS_ADMIN: Can view all shares
- Results are automatically filtered based on user permissions

 * @summary List service shares
 */
export const findAllServiceShares = (
    params?: FindAllServiceSharesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ServiceSharePageResponse>(
      {url: `/api/service-shares`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllServiceSharesQueryKey = (params?: FindAllServiceSharesParams,) => {
    return [
    `/api/service-shares`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllServiceSharesQueryOptions = <TData = Awaited<ReturnType<typeof findAllServiceShares>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params?: FindAllServiceSharesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllServiceSharesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllServiceShares>>> = ({ signal }) => findAllServiceShares(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllServiceSharesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllServiceShares>>>
export type FindAllServiceSharesQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllServiceShares<TData = Awaited<ReturnType<typeof findAllServiceShares>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: undefined |  FindAllServiceSharesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceShares>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceShares>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceShares<TData = Awaited<ReturnType<typeof findAllServiceShares>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllServiceSharesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllServiceShares>>,
          TError,
          Awaited<ReturnType<typeof findAllServiceShares>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllServiceShares<TData = Awaited<ReturnType<typeof findAllServiceShares>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllServiceSharesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List service shares
 */

export function useFindAllServiceShares<TData = Awaited<ReturnType<typeof findAllServiceShares>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllServiceSharesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllServiceShares>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllServiceSharesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Grant fine-grained permissions for a service to another team or user.

**Permission Types:**
- VIEW_INSTANCE: View service instances
- EDIT_INSTANCE: Edit service instances
- VIEW_DRIFT: View drift events
- EDIT_DRIFT: Edit drift events

**Access Control:**
- Team members: Can share services owned by their team
- SYS_ADMIN: Can share any service
- Permissions can be environment-specific (dev, staging, prod)

 * @summary Grant service share
 */
export const grantServiceShare = (
    serviceShareCreateRequest: ServiceShareCreateRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ServiceShareResponse>(
      {url: `/api/service-shares`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: serviceShareCreateRequest, signal
    },
      options);
    }
  


export const getGrantServiceShareMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof grantServiceShare>>, TError,{data: ServiceShareCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof grantServiceShare>>, TError,{data: ServiceShareCreateRequest}, TContext> => {

const mutationKey = ['grantServiceShare'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof grantServiceShare>>, {data: ServiceShareCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  grantServiceShare(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GrantServiceShareMutationResult = NonNullable<Awaited<ReturnType<typeof grantServiceShare>>>
    export type GrantServiceShareMutationBody = ServiceShareCreateRequest
    export type GrantServiceShareMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Grant service share
 */
export const useGrantServiceShare = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof grantServiceShare>>, TError,{data: ServiceShareCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof grantServiceShare>>,
        TError,
        {data: ServiceShareCreateRequest},
        TContext
      > => {

      const mutationOptions = getGrantServiceShareMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a specific service share by its ID.

**Access Control:**
- Team members: Can view shares for services owned by their team
- SYS_ADMIN: Can view any share
- Shared access: Can view shares granted to their team

 * @summary Get service share by ID
 */
export const findByIdServiceShare = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ServiceShareResponse>(
      {url: `/api/service-shares/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindByIdServiceShareQueryKey = (id?: string,) => {
    return [
    `/api/service-shares/${id}`
    ] as const;
    }

    
export const getFindByIdServiceShareQueryOptions = <TData = Awaited<ReturnType<typeof findByIdServiceShare>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindByIdServiceShareQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findByIdServiceShare>>> = ({ signal }) => findByIdServiceShare(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindByIdServiceShareQueryResult = NonNullable<Awaited<ReturnType<typeof findByIdServiceShare>>>
export type FindByIdServiceShareQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindByIdServiceShare<TData = Awaited<ReturnType<typeof findByIdServiceShare>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceShare>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceShare>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceShare<TData = Awaited<ReturnType<typeof findByIdServiceShare>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findByIdServiceShare>>,
          TError,
          Awaited<ReturnType<typeof findByIdServiceShare>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindByIdServiceShare<TData = Awaited<ReturnType<typeof findByIdServiceShare>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service share by ID
 */

export function useFindByIdServiceShare<TData = Awaited<ReturnType<typeof findByIdServiceShare>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findByIdServiceShare>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindByIdServiceShareQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Revoke a service share, removing all granted permissions.

**Access Control:**
- Team members: Can revoke shares for services owned by their team
- SYS_ADMIN: Can revoke any share
- Share creator: Can revoke shares they created

**Note:** This action is irreversible

 * @summary Revoke service share
 */
export const revokeServiceShare = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/service-shares/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRevokeServiceShareMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof revokeServiceShare>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof revokeServiceShare>>, TError,{id: string}, TContext> => {

const mutationKey = ['revokeServiceShare'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof revokeServiceShare>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  revokeServiceShare(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RevokeServiceShareMutationResult = NonNullable<Awaited<ReturnType<typeof revokeServiceShare>>>
    
    export type RevokeServiceShareMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Revoke service share
 */
export const useRevokeServiceShare = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof revokeServiceShare>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof revokeServiceShare>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRevokeServiceShareMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    