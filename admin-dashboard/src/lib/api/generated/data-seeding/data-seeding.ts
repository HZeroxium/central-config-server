/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CleanResult,
  CombinedResult,
  SeedResult
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Generates and saves new mock data (services, instances, drift events, etc.) based on seeding configuration. Does not clean existing data first.
 * @summary Seed new mock data
 */
export const seedData = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SeedResult>(
      {url: `/api/admin/seed/seed`, method: 'POST', signal
    },
      options);
    }
  


export const getSeedDataMutationOptions = <TError = SeedResult | SeedResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof seedData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof seedData>>, TError,void, TContext> => {

const mutationKey = ['seedData'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof seedData>>, void> = () => {
          

          return  seedData(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeedDataMutationResult = NonNullable<Awaited<ReturnType<typeof seedData>>>
    
    export type SeedDataMutationError = SeedResult | SeedResult

    /**
 * @summary Seed new mock data
 */
export const useSeedData = <TError = SeedResult | SeedResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof seedData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof seedData>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getSeedDataMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Atomically removes all existing mock data and generates fresh data. This is the recommended endpoint for environment resets.
 * @summary Clean and seed mock data
 */
export const cleanAndSeedData = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CombinedResult>(
      {url: `/api/admin/seed/clean-and-seed`, method: 'POST', signal
    },
      options);
    }
  


export const getCleanAndSeedDataMutationOptions = <TError = CombinedResult | CombinedResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanAndSeedData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cleanAndSeedData>>, TError,void, TContext> => {

const mutationKey = ['cleanAndSeedData'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cleanAndSeedData>>, void> = () => {
          

          return  cleanAndSeedData(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CleanAndSeedDataMutationResult = NonNullable<Awaited<ReturnType<typeof cleanAndSeedData>>>
    
    export type CleanAndSeedDataMutationError = CombinedResult | CombinedResult

    /**
 * @summary Clean and seed mock data
 */
export const useCleanAndSeedData = <TError = CombinedResult | CombinedResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanAndSeedData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cleanAndSeedData>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCleanAndSeedDataMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Removes all application services, instances, drift events, shares, approval requests, and decisions. IAM data (users/teams) is preserved.
 * @summary Clean all mock data
 */
export const cleanData = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CleanResult>(
      {url: `/api/admin/seed/clean`, method: 'DELETE'
    },
      options);
    }
  


export const getCleanDataMutationOptions = <TError = CleanResult | CleanResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cleanData>>, TError,void, TContext> => {

const mutationKey = ['cleanData'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cleanData>>, void> = () => {
          

          return  cleanData(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CleanDataMutationResult = NonNullable<Awaited<ReturnType<typeof cleanData>>>
    
    export type CleanDataMutationError = CleanResult | CleanResult

    /**
 * @summary Clean all mock data
 */
export const useCleanData = <TError = CleanResult | CleanResult,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cleanData>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cleanData>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCleanDataMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    