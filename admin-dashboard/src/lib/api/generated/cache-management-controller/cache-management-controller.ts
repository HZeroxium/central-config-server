/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ClearAllCaches200,
  ClearCache200,
  GetAvailableProviders200,
  GetCacheHealth200,
  GetCacheStats200,
  GetCacheStatus200,
  SwitchCacheProvider200,
  TestCache200,
  UpdateCacheConfig200,
  UpdateCacheConfigBody
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const updateCacheConfig = (
    updateCacheConfigBody: UpdateCacheConfigBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UpdateCacheConfig200>(
      {url: `/api/cache/config`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCacheConfigBody
    },
      options);
    }
  


export const getUpdateCacheConfigMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCacheConfig>>, TError,{data: UpdateCacheConfigBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCacheConfig>>, TError,{data: UpdateCacheConfigBody}, TContext> => {

const mutationKey = ['updateCacheConfig'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCacheConfig>>, {data: UpdateCacheConfigBody}> = (props) => {
          const {data} = props ?? {};

          return  updateCacheConfig(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCacheConfigMutationResult = NonNullable<Awaited<ReturnType<typeof updateCacheConfig>>>
    export type UpdateCacheConfigMutationBody = UpdateCacheConfigBody
    export type UpdateCacheConfigMutationError = unknown

    export const useUpdateCacheConfig = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCacheConfig>>, TError,{data: UpdateCacheConfigBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCacheConfig>>,
        TError,
        {data: UpdateCacheConfigBody},
        TContext
      > => {

      const mutationOptions = getUpdateCacheConfigMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const testCache = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TestCache200>(
      {url: `/api/cache/test`, method: 'POST', signal
    },
      options);
    }
  


export const getTestCacheMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testCache>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof testCache>>, TError,void, TContext> => {

const mutationKey = ['testCache'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof testCache>>, void> = () => {
          

          return  testCache(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestCacheMutationResult = NonNullable<Awaited<ReturnType<typeof testCache>>>
    
    export type TestCacheMutationError = unknown

    export const useTestCache = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof testCache>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof testCache>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getTestCacheMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const switchCacheProvider = (
    provider: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SwitchCacheProvider200>(
      {url: `/api/cache/providers/${provider}`, method: 'POST', signal
    },
      options);
    }
  


export const getSwitchCacheProviderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof switchCacheProvider>>, TError,{provider: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof switchCacheProvider>>, TError,{provider: string}, TContext> => {

const mutationKey = ['switchCacheProvider'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof switchCacheProvider>>, {provider: string}> = (props) => {
          const {provider} = props ?? {};

          return  switchCacheProvider(provider,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SwitchCacheProviderMutationResult = NonNullable<Awaited<ReturnType<typeof switchCacheProvider>>>
    
    export type SwitchCacheProviderMutationError = unknown

    export const useSwitchCacheProvider = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof switchCacheProvider>>, TError,{provider: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof switchCacheProvider>>,
        TError,
        {provider: string},
        TContext
      > => {

      const mutationOptions = getSwitchCacheProviderMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getCacheStatus = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetCacheStatus200>(
      {url: `/api/cache/status`, method: 'GET', signal
    },
      options);
    }
  



export const getGetCacheStatusInfiniteQueryKey = () => {
    return [
    'infinite', `/api/cache/status`
    ] as const;
    }

export const getGetCacheStatusQueryKey = () => {
    return [
    `/api/cache/status`
    ] as const;
    }

    
export const getGetCacheStatusInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCacheStatus>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheStatusInfiniteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheStatus>>> = ({ signal }) => getCacheStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheStatusInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheStatus>>>
export type GetCacheStatusInfiniteQueryError = unknown


export function useGetCacheStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStatus>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStatus>>,
          TError,
          Awaited<ReturnType<typeof getCacheStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStatus>>,
          TError,
          Awaited<ReturnType<typeof getCacheStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheStatusInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStatus>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheStatusInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCacheStatusQueryOptions = <TData = Awaited<ReturnType<typeof getCacheStatus>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheStatus>>> = ({ signal }) => getCacheStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheStatus>>>
export type GetCacheStatusQueryError = unknown


export function useGetCacheStatus<TData = Awaited<ReturnType<typeof getCacheStatus>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStatus>>,
          TError,
          Awaited<ReturnType<typeof getCacheStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatus<TData = Awaited<ReturnType<typeof getCacheStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStatus>>,
          TError,
          Awaited<ReturnType<typeof getCacheStatus>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatus<TData = Awaited<ReturnType<typeof getCacheStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheStatus<TData = Awaited<ReturnType<typeof getCacheStatus>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStatus>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheStatusQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCacheStats = (
    cacheName: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetCacheStats200>(
      {url: `/api/cache/stats/${cacheName}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetCacheStatsInfiniteQueryKey = (cacheName?: string,) => {
    return [
    'infinite', `/api/cache/stats/${cacheName}`
    ] as const;
    }

export const getGetCacheStatsQueryKey = (cacheName?: string,) => {
    return [
    `/api/cache/stats/${cacheName}`
    ] as const;
    }

    
export const getGetCacheStatsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCacheStats>>>, TError = unknown>(cacheName: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheStatsInfiniteQueryKey(cacheName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheStats>>> = ({ signal }) => getCacheStats(cacheName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cacheName), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheStatsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheStats>>>
export type GetCacheStatsInfiniteQueryError = unknown


export function useGetCacheStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStats>>>, TError = unknown>(
 cacheName: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStats>>,
          TError,
          Awaited<ReturnType<typeof getCacheStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStats>>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStats>>,
          TError,
          Awaited<ReturnType<typeof getCacheStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStats>>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheStatsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheStats>>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheStatsInfiniteQueryOptions(cacheName,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCacheStatsQueryOptions = <TData = Awaited<ReturnType<typeof getCacheStats>>, TError = unknown>(cacheName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheStatsQueryKey(cacheName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheStats>>> = ({ signal }) => getCacheStats(cacheName, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cacheName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheStats>>>
export type GetCacheStatsQueryError = unknown


export function useGetCacheStats<TData = Awaited<ReturnType<typeof getCacheStats>>, TError = unknown>(
 cacheName: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStats>>,
          TError,
          Awaited<ReturnType<typeof getCacheStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStats<TData = Awaited<ReturnType<typeof getCacheStats>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheStats>>,
          TError,
          Awaited<ReturnType<typeof getCacheStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheStats<TData = Awaited<ReturnType<typeof getCacheStats>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheStats<TData = Awaited<ReturnType<typeof getCacheStats>>, TError = unknown>(
 cacheName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheStatsQueryOptions(cacheName,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAvailableProviders = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetAvailableProviders200>(
      {url: `/api/cache/providers`, method: 'GET', signal
    },
      options);
    }
  



export const getGetAvailableProvidersInfiniteQueryKey = () => {
    return [
    'infinite', `/api/cache/providers`
    ] as const;
    }

export const getGetAvailableProvidersQueryKey = () => {
    return [
    `/api/cache/providers`
    ] as const;
    }

    
export const getGetAvailableProvidersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAvailableProviders>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableProvidersInfiniteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableProviders>>> = ({ signal }) => getAvailableProviders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableProvidersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableProviders>>>
export type GetAvailableProvidersInfiniteQueryError = unknown


export function useGetAvailableProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableProviders>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableProviders>>,
          TError,
          Awaited<ReturnType<typeof getAvailableProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableProviders>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableProviders>>,
          TError,
          Awaited<ReturnType<typeof getAvailableProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableProviders>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAvailableProvidersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getAvailableProviders>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableProvidersInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAvailableProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getAvailableProviders>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAvailableProvidersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableProviders>>> = ({ signal }) => getAvailableProviders(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAvailableProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableProviders>>>
export type GetAvailableProvidersQueryError = unknown


export function useGetAvailableProviders<TData = Awaited<ReturnType<typeof getAvailableProviders>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableProviders>>,
          TError,
          Awaited<ReturnType<typeof getAvailableProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableProviders<TData = Awaited<ReturnType<typeof getAvailableProviders>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableProviders>>,
          TError,
          Awaited<ReturnType<typeof getAvailableProviders>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAvailableProviders<TData = Awaited<ReturnType<typeof getAvailableProviders>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAvailableProviders<TData = Awaited<ReturnType<typeof getAvailableProviders>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAvailableProviders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAvailableProvidersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCacheHealth = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetCacheHealth200>(
      {url: `/api/cache/health`, method: 'GET', signal
    },
      options);
    }
  



export const getGetCacheHealthInfiniteQueryKey = () => {
    return [
    'infinite', `/api/cache/health`
    ] as const;
    }

export const getGetCacheHealthQueryKey = () => {
    return [
    `/api/cache/health`
    ] as const;
    }

    
export const getGetCacheHealthInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCacheHealth>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheHealthInfiniteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheHealth>>> = ({ signal }) => getCacheHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheHealthInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheHealth>>>
export type GetCacheHealthInfiniteQueryError = unknown


export function useGetCacheHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheHealth>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheHealth>>,
          TError,
          Awaited<ReturnType<typeof getCacheHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheHealth>>,
          TError,
          Awaited<ReturnType<typeof getCacheHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheHealthInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCacheHealth>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheHealthInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCacheHealthQueryOptions = <TData = Awaited<ReturnType<typeof getCacheHealth>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCacheHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCacheHealth>>> = ({ signal }) => getCacheHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCacheHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getCacheHealth>>>
export type GetCacheHealthQueryError = unknown


export function useGetCacheHealth<TData = Awaited<ReturnType<typeof getCacheHealth>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheHealth>>,
          TError,
          Awaited<ReturnType<typeof getCacheHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheHealth<TData = Awaited<ReturnType<typeof getCacheHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCacheHealth>>,
          TError,
          Awaited<ReturnType<typeof getCacheHealth>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCacheHealth<TData = Awaited<ReturnType<typeof getCacheHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCacheHealth<TData = Awaited<ReturnType<typeof getCacheHealth>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCacheHealth>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCacheHealthQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const clearCache = (
    cacheName: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ClearCache200>(
      {url: `/api/cache/${cacheName}`, method: 'DELETE'
    },
      options);
    }
  


export const getClearCacheMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCache>>, TError,{cacheName: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof clearCache>>, TError,{cacheName: string}, TContext> => {

const mutationKey = ['clearCache'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearCache>>, {cacheName: string}> = (props) => {
          const {cacheName} = props ?? {};

          return  clearCache(cacheName,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearCacheMutationResult = NonNullable<Awaited<ReturnType<typeof clearCache>>>
    
    export type ClearCacheMutationError = unknown

    export const useClearCache = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCache>>, TError,{cacheName: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof clearCache>>,
        TError,
        {cacheName: string},
        TContext
      > => {

      const mutationOptions = getClearCacheMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const clearAllCaches = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ClearAllCaches200>(
      {url: `/api/cache/all`, method: 'DELETE'
    },
      options);
    }
  


export const getClearAllCachesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearAllCaches>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof clearAllCaches>>, TError,void, TContext> => {

const mutationKey = ['clearAllCaches'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearAllCaches>>, void> = () => {
          

          return  clearAllCaches(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearAllCachesMutationResult = NonNullable<Awaited<ReturnType<typeof clearAllCaches>>>
    
    export type ClearAllCachesMutationError = unknown

    export const useClearAllCaches = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearAllCaches>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof clearAllCaches>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearAllCachesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    