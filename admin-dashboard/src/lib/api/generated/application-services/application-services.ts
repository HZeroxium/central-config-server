/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApplicationServiceCreateRequest,
  ApplicationServicePageResponse,
  ApplicationServiceResponse,
  ApplicationServiceUpdateRequest,
  ErrorResponse,
  FindAllApplicationServicesParams
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a specific application service by its ID.

**Access Control:**
- Public endpoint - no authentication required
- Returns service metadata for discovery purposes

 * @summary Get application service by ID
 */
export const findApplicationServiceById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationServiceResponse>(
      {url: `/api/application-services/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindApplicationServiceByIdQueryKey = (id?: string,) => {
    return [
    `/api/application-services/${id}`
    ] as const;
    }

    
export const getFindApplicationServiceByIdQueryOptions = <TData = Awaited<ReturnType<typeof findApplicationServiceById>>, TError = ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApplicationServiceByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApplicationServiceById>>> = ({ signal }) => findApplicationServiceById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindApplicationServiceByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findApplicationServiceById>>>
export type FindApplicationServiceByIdQueryError = ErrorResponse | ErrorResponse


export function useFindApplicationServiceById<TData = Awaited<ReturnType<typeof findApplicationServiceById>>, TError = ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApplicationServiceById>>,
          TError,
          Awaited<ReturnType<typeof findApplicationServiceById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApplicationServiceById<TData = Awaited<ReturnType<typeof findApplicationServiceById>>, TError = ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApplicationServiceById>>,
          TError,
          Awaited<ReturnType<typeof findApplicationServiceById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApplicationServiceById<TData = Awaited<ReturnType<typeof findApplicationServiceById>>, TError = ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get application service by ID
 */

export function useFindApplicationServiceById<TData = Awaited<ReturnType<typeof findApplicationServiceById>>, TError = ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApplicationServiceById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindApplicationServiceByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing application service.

**Required Permissions:**
- SYS_ADMIN: Can update any service
- Team members: Can update services owned by their team
- Partial updates are supported (only provided fields are updated)

 * @summary Update application service
 */
export const updateApplicationService = (
    id: string,
    applicationServiceUpdateRequest: ApplicationServiceUpdateRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ApplicationServiceResponse>(
      {url: `/api/application-services/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: applicationServiceUpdateRequest
    },
      options);
    }
  


export const getUpdateApplicationServiceMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApplicationService>>, TError,{id: string;data: ApplicationServiceUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateApplicationService>>, TError,{id: string;data: ApplicationServiceUpdateRequest}, TContext> => {

const mutationKey = ['updateApplicationService'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateApplicationService>>, {id: string;data: ApplicationServiceUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateApplicationService(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateApplicationServiceMutationResult = NonNullable<Awaited<ReturnType<typeof updateApplicationService>>>
    export type UpdateApplicationServiceMutationBody = ApplicationServiceUpdateRequest
    export type UpdateApplicationServiceMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update application service
 */
export const useUpdateApplicationService = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateApplicationService>>, TError,{id: string;data: ApplicationServiceUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateApplicationService>>,
        TError,
        {id: string;data: ApplicationServiceUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateApplicationServiceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Delete an application service permanently.

**Required Permissions:**
- SYS_ADMIN: Only system administrators can delete services
- This action is irreversible and will remove all associated data

 * @summary Delete application service
 */
export const deleteApplicationService = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/application-services/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApplicationServiceMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationService>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationService>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApplicationService'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApplicationService>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApplicationService(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApplicationServiceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApplicationService>>>
    
    export type DeleteApplicationServiceMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Delete application service
 */
export const useDeleteApplicationService = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationService>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApplicationService>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApplicationServiceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a paginated list of all application services.

**Access Control:**
- All authenticated users can view application services
- Services are public to authenticated users for discovery
- Filtering by team ownership is applied automatically

 * @summary List all application services
 */
export const findAllApplicationServices = (
    params?: FindAllApplicationServicesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationServicePageResponse>(
      {url: `/api/application-services`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllApplicationServicesQueryKey = (params?: FindAllApplicationServicesParams,) => {
    return [
    `/api/application-services`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllApplicationServicesQueryOptions = <TData = Awaited<ReturnType<typeof findAllApplicationServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params?: FindAllApplicationServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllApplicationServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllApplicationServices>>> = ({ signal }) => findAllApplicationServices(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllApplicationServicesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllApplicationServices>>>
export type FindAllApplicationServicesQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllApplicationServices<TData = Awaited<ReturnType<typeof findAllApplicationServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: undefined |  FindAllApplicationServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApplicationServices>>,
          TError,
          Awaited<ReturnType<typeof findAllApplicationServices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApplicationServices<TData = Awaited<ReturnType<typeof findAllApplicationServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApplicationServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApplicationServices>>,
          TError,
          Awaited<ReturnType<typeof findAllApplicationServices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApplicationServices<TData = Awaited<ReturnType<typeof findAllApplicationServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApplicationServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all application services
 */

export function useFindAllApplicationServices<TData = Awaited<ReturnType<typeof findAllApplicationServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllApplicationServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApplicationServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllApplicationServicesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new application service with team ownership.

**Required Permissions:**
- SYS_ADMIN: Can create services for any team
- Team members: Can create services for their own team
- Service ID must be unique across the system

 * @summary Create a new application service
 */
export const createApplicationService = (
    applicationServiceCreateRequest: ApplicationServiceCreateRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApplicationServiceResponse>(
      {url: `/api/application-services`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationServiceCreateRequest, signal
    },
      options);
    }
  


export const getCreateApplicationServiceMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplicationService>>, TError,{data: ApplicationServiceCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createApplicationService>>, TError,{data: ApplicationServiceCreateRequest}, TContext> => {

const mutationKey = ['createApplicationService'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createApplicationService>>, {data: ApplicationServiceCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createApplicationService(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateApplicationServiceMutationResult = NonNullable<Awaited<ReturnType<typeof createApplicationService>>>
    export type CreateApplicationServiceMutationBody = ApplicationServiceCreateRequest
    export type CreateApplicationServiceMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create a new application service
 */
export const useCreateApplicationService = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplicationService>>, TError,{data: ApplicationServiceCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createApplicationService>>,
        TError,
        {data: ApplicationServiceCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateApplicationServiceMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    