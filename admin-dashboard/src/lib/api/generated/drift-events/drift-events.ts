/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DriftEventCreateRequest,
  DriftEventPageResponse,
  DriftEventResponse,
  DriftEventUpdateRequest,
  ErrorResponse,
  FindAllDriftEventsParams
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve a paginated list of drift events with optional filtering.

**Access Control:**
- Team members: Can view drift events for services owned by their team
- SYS_ADMIN: Can view all drift events
- Shared access: Can view drift events for services shared with their team
- Results are automatically filtered based on user permissions

 * @summary List drift events with filters and pagination
 */
export const findAllDriftEvents = (
    params?: FindAllDriftEventsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DriftEventPageResponse>(
      {url: `/api/drift-events`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllDriftEventsQueryKey = (params?: FindAllDriftEventsParams,) => {
    return [
    `/api/drift-events`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllDriftEventsQueryOptions = <TData = Awaited<ReturnType<typeof findAllDriftEvents>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params?: FindAllDriftEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllDriftEventsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllDriftEvents>>> = ({ signal }) => findAllDriftEvents(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllDriftEventsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllDriftEvents>>>
export type FindAllDriftEventsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllDriftEvents<TData = Awaited<ReturnType<typeof findAllDriftEvents>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: undefined |  FindAllDriftEventsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllDriftEvents>>,
          TError,
          Awaited<ReturnType<typeof findAllDriftEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllDriftEvents<TData = Awaited<ReturnType<typeof findAllDriftEvents>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllDriftEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllDriftEvents>>,
          TError,
          Awaited<ReturnType<typeof findAllDriftEvents>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllDriftEvents<TData = Awaited<ReturnType<typeof findAllDriftEvents>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllDriftEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List drift events with filters and pagination
 */

export function useFindAllDriftEvents<TData = Awaited<ReturnType<typeof findAllDriftEvents>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params?: FindAllDriftEventsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllDriftEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllDriftEventsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new drift event when configuration drift is detected.

**Access Control:**
- Team members: Can create drift events for services owned by their team
- SYS_ADMIN: Can create drift events for any service
- System: Can create drift events automatically during heartbeat processing

 * @summary Create drift event
 */
export const createDriftEvent = (
    driftEventCreateRequest: DriftEventCreateRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DriftEventResponse>(
      {url: `/api/drift-events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: driftEventCreateRequest, signal
    },
      options);
    }
  


export const getCreateDriftEventMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDriftEvent>>, TError,{data: DriftEventCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createDriftEvent>>, TError,{data: DriftEventCreateRequest}, TContext> => {

const mutationKey = ['createDriftEvent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDriftEvent>>, {data: DriftEventCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDriftEvent(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDriftEventMutationResult = NonNullable<Awaited<ReturnType<typeof createDriftEvent>>>
    export type CreateDriftEventMutationBody = DriftEventCreateRequest
    export type CreateDriftEventMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create drift event
 */
export const useCreateDriftEvent = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDriftEvent>>, TError,{data: DriftEventCreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDriftEvent>>,
        TError,
        {data: DriftEventCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateDriftEventMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a specific drift event by its ID.

**Access Control:**
- Team members: Can view drift events for services owned by their team
- SYS_ADMIN: Can view any drift event
- Shared access: Can view drift events for services shared with their team

 * @summary Get drift event by ID
 */
export const findDriftEventById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DriftEventResponse>(
      {url: `/api/drift-events/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindDriftEventByIdQueryKey = (id?: string,) => {
    return [
    `/api/drift-events/${id}`
    ] as const;
    }

    
export const getFindDriftEventByIdQueryOptions = <TData = Awaited<ReturnType<typeof findDriftEventById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindDriftEventByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findDriftEventById>>> = ({ signal }) => findDriftEventById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindDriftEventByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findDriftEventById>>>
export type FindDriftEventByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindDriftEventById<TData = Awaited<ReturnType<typeof findDriftEventById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findDriftEventById>>,
          TError,
          Awaited<ReturnType<typeof findDriftEventById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDriftEventById<TData = Awaited<ReturnType<typeof findDriftEventById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findDriftEventById>>,
          TError,
          Awaited<ReturnType<typeof findDriftEventById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDriftEventById<TData = Awaited<ReturnType<typeof findDriftEventById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get drift event by ID
 */

export function useFindDriftEventById<TData = Awaited<ReturnType<typeof findDriftEventById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findDriftEventById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindDriftEventByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an existing drift event (status and notes).

**Access Control:**
- Team members: Can update drift events for services owned by their team
- SYS_ADMIN: Can update any drift event
- Updates include status changes (DETECTED, RESOLVED, IGNORED) and resolution notes

 * @summary Update drift event
 */
export const updateDriftEvent = (
    id: string,
    driftEventUpdateRequest: DriftEventUpdateRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DriftEventResponse>(
      {url: `/api/drift-events/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: driftEventUpdateRequest
    },
      options);
    }
  


export const getUpdateDriftEventMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDriftEvent>>, TError,{id: string;data: DriftEventUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateDriftEvent>>, TError,{id: string;data: DriftEventUpdateRequest}, TContext> => {

const mutationKey = ['updateDriftEvent'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDriftEvent>>, {id: string;data: DriftEventUpdateRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateDriftEvent(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDriftEventMutationResult = NonNullable<Awaited<ReturnType<typeof updateDriftEvent>>>
    export type UpdateDriftEventMutationBody = DriftEventUpdateRequest
    export type UpdateDriftEventMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Update drift event
 */
export const useUpdateDriftEvent = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDriftEvent>>, TError,{id: string;data: DriftEventUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDriftEvent>>,
        TError,
        {id: string;data: DriftEventUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateDriftEventMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    