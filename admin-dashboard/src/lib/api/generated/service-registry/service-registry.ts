/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ConsulServicesMap,
  ErrorResponse,
  GetServiceRegistryServiceInstancesParams,
  ServiceInstancesRegistryResponse
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieves a list of all services registered with Consul.
This provides an overview of available services in the ecosystem.

 * @summary List all registered services
 */
export const listServiceRegistryServices = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ConsulServicesMap>(
      {url: `/api/registry/services`, method: 'GET', signal
    },
      options);
    }
  



export const getListServiceRegistryServicesQueryKey = () => {
    return [
    `/api/registry/services`
    ] as const;
    }

    
export const getListServiceRegistryServicesQueryOptions = <TData = Awaited<ReturnType<typeof listServiceRegistryServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListServiceRegistryServicesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listServiceRegistryServices>>> = ({ signal }) => listServiceRegistryServices(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListServiceRegistryServicesQueryResult = NonNullable<Awaited<ReturnType<typeof listServiceRegistryServices>>>
export type ListServiceRegistryServicesQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useListServiceRegistryServices<TData = Awaited<ReturnType<typeof listServiceRegistryServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServiceRegistryServices>>,
          TError,
          Awaited<ReturnType<typeof listServiceRegistryServices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListServiceRegistryServices<TData = Awaited<ReturnType<typeof listServiceRegistryServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listServiceRegistryServices>>,
          TError,
          Awaited<ReturnType<typeof listServiceRegistryServices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListServiceRegistryServices<TData = Awaited<ReturnType<typeof listServiceRegistryServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List all registered services
 */

export function useListServiceRegistryServices<TData = Awaited<ReturnType<typeof listServiceRegistryServices>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listServiceRegistryServices>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListServiceRegistryServicesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves instances of a specific service from Consul.
Can filter to show only healthy instances or all instances.

 * @summary Get service instances
 */
export const getServiceRegistryServiceInstances = (
    serviceName: string,
    params?: GetServiceRegistryServiceInstancesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ServiceInstancesRegistryResponse>(
      {url: `/api/registry/services/${serviceName}/instances`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetServiceRegistryServiceInstancesQueryKey = (serviceName?: string,
    params?: GetServiceRegistryServiceInstancesParams,) => {
    return [
    `/api/registry/services/${serviceName}/instances`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetServiceRegistryServiceInstancesQueryOptions = <TData = Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(serviceName: string,
    params?: GetServiceRegistryServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServiceRegistryServiceInstancesQueryKey(serviceName,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>> = ({ signal }) => getServiceRegistryServiceInstances(serviceName,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(serviceName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServiceRegistryServiceInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>>
export type GetServiceRegistryServiceInstancesQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetServiceRegistryServiceInstances<TData = Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    params: undefined |  GetServiceRegistryServiceInstancesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceRegistryServiceInstances<TData = Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    params?: GetServiceRegistryServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>,
          TError,
          Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServiceRegistryServiceInstances<TData = Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    params?: GetServiceRegistryServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get service instances
 */

export function useGetServiceRegistryServiceInstances<TData = Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 serviceName: string,
    params?: GetServiceRegistryServiceInstancesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServiceRegistryServiceInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetServiceRegistryServiceInstancesQueryOptions(serviceName,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



