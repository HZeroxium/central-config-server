/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRequest,
  DecisionRequest,
  ErrorResponse,
  FindAllApprovalRequestsParams,
  Page,
  Response
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Submit a decision (approve/reject) for an approval request.

**Multi-Gate Approval:**
- SYS_ADMIN: Can approve/reject any request
- LINE_MANAGER: Can approve/reject requests from their direct reports
- Request status is updated based on required approvals from configured gates

**Access Control:**
- Only authorized approvers can submit decisions
- Decision is recorded with approver information and timestamp

 * @summary Submit approval decision
 */
export const submitApprovalDecision = (
    id: string,
    decisionRequest: DecisionRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Response>(
      {url: `/api/approval-requests/${id}/decisions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: decisionRequest, signal
    },
      options);
    }
  


export const getSubmitApprovalDecisionMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitApprovalDecision>>, TError,{id: string;data: DecisionRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof submitApprovalDecision>>, TError,{id: string;data: DecisionRequest}, TContext> => {

const mutationKey = ['submitApprovalDecision'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof submitApprovalDecision>>, {id: string;data: DecisionRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  submitApprovalDecision(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SubmitApprovalDecisionMutationResult = NonNullable<Awaited<ReturnType<typeof submitApprovalDecision>>>
    export type SubmitApprovalDecisionMutationBody = DecisionRequest
    export type SubmitApprovalDecisionMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Submit approval decision
 */
export const useSubmitApprovalDecision = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof submitApprovalDecision>>, TError,{id: string;data: DecisionRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof submitApprovalDecision>>,
        TError,
        {id: string;data: DecisionRequest},
        TContext
      > => {

      const mutationOptions = getSubmitApprovalDecisionMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Create a new approval request for service ownership.

**Multi-Gate Approval Flow:**
- SYS_ADMIN: Can approve/reject any request
- LINE_MANAGER: Can approve requests from their direct reports
- Request requires approval from configured gates before service ownership is transferred

**Access Control:**
- Team members: Can create requests for services not owned by their team
- SYS_ADMIN: Can create requests for any service

 * @summary Create approval request
 */
export const createApprovalRequest = (
    serviceId: string,
    createRequest: CreateRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Response>(
      {url: `/api/approval-requests/application-services/${serviceId}/approval-requests`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRequest, signal
    },
      options);
    }
  


export const getCreateApprovalRequestMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApprovalRequest>>, TError,{serviceId: string;data: CreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createApprovalRequest>>, TError,{serviceId: string;data: CreateRequest}, TContext> => {

const mutationKey = ['createApprovalRequest'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createApprovalRequest>>, {serviceId: string;data: CreateRequest}> = (props) => {
          const {serviceId,data} = props ?? {};

          return  createApprovalRequest(serviceId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateApprovalRequestMutationResult = NonNullable<Awaited<ReturnType<typeof createApprovalRequest>>>
    export type CreateApprovalRequestMutationBody = CreateRequest
    export type CreateApprovalRequestMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Create approval request
 */
export const useCreateApprovalRequest = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApprovalRequest>>, TError,{serviceId: string;data: CreateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createApprovalRequest>>,
        TError,
        {serviceId: string;data: CreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateApprovalRequestMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retrieve a paginated list of approval requests.

**Access Control:**
- Team members: Can view their own requests
- SYS_ADMIN: Can view all requests
- LINE_MANAGER: Can view requests from their direct reports
- Results are automatically filtered based on user permissions

 * @summary List approval requests
 */
export const findAllApprovalRequests = (
    params: FindAllApprovalRequestsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Page>(
      {url: `/api/approval-requests`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getFindAllApprovalRequestsInfiniteQueryKey = (params?: FindAllApprovalRequestsParams,) => {
    return [
    'infinite', `/api/approval-requests`, ...(params ? [params]: [])
    ] as const;
    }

export const getFindAllApprovalRequestsQueryKey = (params?: FindAllApprovalRequestsParams,) => {
    return [
    `/api/approval-requests`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getFindAllApprovalRequestsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAllApprovalRequests>>, FindAllApprovalRequestsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllApprovalRequestsInfiniteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllApprovalRequests>>, QueryKey, FindAllApprovalRequestsParams['page']> = ({ signal, pageParam }) => findAllApprovalRequests({...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllApprovalRequestsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllApprovalRequests>>>
export type FindAllApprovalRequestsInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllApprovalRequestsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllApprovalRequests>>, FindAllApprovalRequestsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalRequests>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalRequests>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalRequestsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllApprovalRequests>>, FindAllApprovalRequestsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalRequests>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalRequests>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalRequestsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllApprovalRequests>>, FindAllApprovalRequestsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List approval requests
 */

export function useFindAllApprovalRequestsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findAllApprovalRequests>>, FindAllApprovalRequestsParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData, QueryKey, FindAllApprovalRequestsParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllApprovalRequestsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllApprovalRequestsQueryOptions = <TData = Awaited<ReturnType<typeof findAllApprovalRequests>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllApprovalRequestsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllApprovalRequests>>> = ({ signal }) => findAllApprovalRequests(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllApprovalRequestsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllApprovalRequests>>>
export type FindAllApprovalRequestsQueryError = ErrorResponse | ErrorResponse | ErrorResponse


export function useFindAllApprovalRequests<TData = Awaited<ReturnType<typeof findAllApprovalRequests>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalRequests>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalRequests>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalRequests<TData = Awaited<ReturnType<typeof findAllApprovalRequests>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllApprovalRequests>>,
          TError,
          Awaited<ReturnType<typeof findAllApprovalRequests>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllApprovalRequests<TData = Awaited<ReturnType<typeof findAllApprovalRequests>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List approval requests
 */

export function useFindAllApprovalRequests<TData = Awaited<ReturnType<typeof findAllApprovalRequests>>, TError = ErrorResponse | ErrorResponse | ErrorResponse>(
 params: FindAllApprovalRequestsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllApprovalRequests>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllApprovalRequestsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve a specific approval request by its ID.

**Access Control:**
- Team members: Can view their own requests
- SYS_ADMIN: Can view any request
- LINE_MANAGER: Can view requests from their direct reports

 * @summary Get approval request by ID
 */
export const findApprovalRequestById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Response>(
      {url: `/api/approval-requests/${id}`, method: 'GET', signal
    },
      options);
    }
  



export const getFindApprovalRequestByIdInfiniteQueryKey = (id?: string,) => {
    return [
    'infinite', `/api/approval-requests/${id}`
    ] as const;
    }

export const getFindApprovalRequestByIdQueryKey = (id?: string,) => {
    return [
    `/api/approval-requests/${id}`
    ] as const;
    }

    
export const getFindApprovalRequestByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findApprovalRequestById>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApprovalRequestByIdInfiniteQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApprovalRequestById>>> = ({ signal }) => findApprovalRequestById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindApprovalRequestByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findApprovalRequestById>>>
export type FindApprovalRequestByIdInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindApprovalRequestByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findApprovalRequestById>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalRequestById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalRequestById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalRequestByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findApprovalRequestById>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalRequestById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalRequestById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalRequestByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findApprovalRequestById>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get approval request by ID
 */

export function useFindApprovalRequestByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof findApprovalRequestById>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindApprovalRequestByIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindApprovalRequestByIdQueryOptions = <TData = Awaited<ReturnType<typeof findApprovalRequestById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindApprovalRequestByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findApprovalRequestById>>> = ({ signal }) => findApprovalRequestById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindApprovalRequestByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findApprovalRequestById>>>
export type FindApprovalRequestByIdQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useFindApprovalRequestById<TData = Awaited<ReturnType<typeof findApprovalRequestById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalRequestById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalRequestById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalRequestById<TData = Awaited<ReturnType<typeof findApprovalRequestById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findApprovalRequestById>>,
          TError,
          Awaited<ReturnType<typeof findApprovalRequestById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindApprovalRequestById<TData = Awaited<ReturnType<typeof findApprovalRequestById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get approval request by ID
 */

export function useFindApprovalRequestById<TData = Awaited<ReturnType<typeof findApprovalRequestById>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findApprovalRequestById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindApprovalRequestByIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Cancel an approval request.

**Access Control:**
- Requester: Can cancel their own requests
- SYS_ADMIN: Can cancel any request
- Request must be in PENDING status to be cancelled

**Note:** Once cancelled, the request cannot be reactivated

 * @summary Cancel approval request
 */
export const cancelApprovalRequest = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/approval-requests/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCancelApprovalRequestMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelApprovalRequest>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cancelApprovalRequest>>, TError,{id: string}, TContext> => {

const mutationKey = ['cancelApprovalRequest'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelApprovalRequest>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  cancelApprovalRequest(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CancelApprovalRequestMutationResult = NonNullable<Awaited<ReturnType<typeof cancelApprovalRequest>>>
    
    export type CancelApprovalRequestMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary Cancel approval request
 */
export const useCancelApprovalRequest = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cancelApprovalRequest>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof cancelApprovalRequest>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCancelApprovalRequestMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    