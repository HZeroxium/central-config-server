/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Config Control Service API
 * Centralized configuration management and drift detection service.

**Features:**
- Service instance heartbeat tracking
- Configuration drift detection and reporting
- Service discovery integration with Consul
- Config refresh orchestration via Kafka
- Real-time monitoring and alerts

**Architecture:**
- Hexagonal architecture with distinct API, Application, Domain, and Infrastructure layers
- MongoDB for persistence
- Redis for caching
- Kafka for event broadcasting

 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ConfigServerActuatorHealthResponse,
  ConfigServerEnvironmentResponse,
  ConfigServerInfo,
  ErrorResponse,
  GetActuatorEndpointConfigServer200,
  GetEnvironmentConfigServerParams
} from '../../models';

import { customInstance } from '../../mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieves basic information about the Config Server instance.
This includes URL, status, and version information.

 * @summary Get Config Server information
 */
export const getInfoConfigServer = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ConfigServerInfo>(
      {url: `/api/config-server/info`, method: 'GET', signal
    },
      options);
    }
  



export const getGetInfoConfigServerInfiniteQueryKey = () => {
    return [
    'infinite', `/api/config-server/info`
    ] as const;
    }

export const getGetInfoConfigServerQueryKey = () => {
    return [
    `/api/config-server/info`
    ] as const;
    }

    
export const getGetInfoConfigServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getInfoConfigServer>>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInfoConfigServerInfiniteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInfoConfigServer>>> = ({ signal }) => getInfoConfigServer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInfoConfigServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getInfoConfigServer>>>
export type GetInfoConfigServerInfiniteQueryError = ErrorResponse | ErrorResponse


export function useGetInfoConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInfoConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getInfoConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInfoConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getInfoConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInfoConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Config Server information
 */

export function useGetInfoConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInfoConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInfoConfigServerInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetInfoConfigServerQueryOptions = <TData = Awaited<ReturnType<typeof getInfoConfigServer>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInfoConfigServerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInfoConfigServer>>> = ({ signal }) => getInfoConfigServer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInfoConfigServerQueryResult = NonNullable<Awaited<ReturnType<typeof getInfoConfigServer>>>
export type GetInfoConfigServerQueryError = ErrorResponse | ErrorResponse


export function useGetInfoConfigServer<TData = Awaited<ReturnType<typeof getInfoConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getInfoConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoConfigServer<TData = Awaited<ReturnType<typeof getInfoConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInfoConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getInfoConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInfoConfigServer<TData = Awaited<ReturnType<typeof getInfoConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Config Server information
 */

export function useGetInfoConfigServer<TData = Awaited<ReturnType<typeof getInfoConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInfoConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInfoConfigServerQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves the health status of the underlying Spring Cloud Config Server.
This provides information about the Config Server's operational state.

 * @summary Get Config Server health status
 */
export const getHealthConfigServer = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ConfigServerActuatorHealthResponse>(
      {url: `/api/config-server/health`, method: 'GET', signal
    },
      options);
    }
  



export const getGetHealthConfigServerInfiniteQueryKey = () => {
    return [
    'infinite', `/api/config-server/health`
    ] as const;
    }

export const getGetHealthConfigServerQueryKey = () => {
    return [
    `/api/config-server/health`
    ] as const;
    }

    
export const getGetHealthConfigServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHealthConfigServer>>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthConfigServerInfiniteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthConfigServer>>> = ({ signal }) => getHealthConfigServer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthConfigServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthConfigServer>>>
export type GetHealthConfigServerInfiniteQueryError = ErrorResponse | ErrorResponse


export function useGetHealthConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getHealthConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getHealthConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Config Server health status
 */

export function useGetHealthConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHealthConfigServer>>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthConfigServerInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHealthConfigServerQueryOptions = <TData = Awaited<ReturnType<typeof getHealthConfigServer>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthConfigServerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthConfigServer>>> = ({ signal }) => getHealthConfigServer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthConfigServerQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthConfigServer>>>
export type GetHealthConfigServerQueryError = ErrorResponse | ErrorResponse


export function useGetHealthConfigServer<TData = Awaited<ReturnType<typeof getHealthConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getHealthConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthConfigServer<TData = Awaited<ReturnType<typeof getHealthConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealthConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getHealthConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthConfigServer<TData = Awaited<ReturnType<typeof getHealthConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Config Server health status
 */

export function useGetHealthConfigServer<TData = Awaited<ReturnType<typeof getHealthConfigServer>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHealthConfigServerQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieves the configuration properties for a given application and profile from the Config Server.
This acts as a proxy to the underlying Spring Cloud Config Server.

 * @summary Get configuration environment
 */
export const getEnvironmentConfigServer = (
    application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ConfigServerEnvironmentResponse>(
      {url: `/api/config-server/environment/${application}/${profile}`, method: 'GET',
        params, signal
    },
      options);
    }
  



export const getGetEnvironmentConfigServerInfiniteQueryKey = (application?: string,
    profile?: string,
    params?: GetEnvironmentConfigServerParams,) => {
    return [
    'infinite', `/api/config-server/environment/${application}/${profile}`, ...(params ? [params]: [])
    ] as const;
    }

export const getGetEnvironmentConfigServerQueryKey = (application?: string,
    profile?: string,
    params?: GetEnvironmentConfigServerParams,) => {
    return [
    `/api/config-server/environment/${application}/${profile}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetEnvironmentConfigServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, GetEnvironmentConfigServerParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEnvironmentConfigServerInfiniteQueryKey(application,profile,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, QueryKey, GetEnvironmentConfigServerParams['page']> = ({ signal, pageParam }) => getEnvironmentConfigServer(application,profile,{...params, 'page': pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(application && profile), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEnvironmentConfigServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getEnvironmentConfigServer>>>
export type GetEnvironmentConfigServerInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetEnvironmentConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, GetEnvironmentConfigServerParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params: undefined |  GetEnvironmentConfigServerParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnvironmentConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, GetEnvironmentConfigServerParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnvironmentConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, GetEnvironmentConfigServerParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get configuration environment
 */

export function useGetEnvironmentConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, GetEnvironmentConfigServerParams['page']>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData, QueryKey, GetEnvironmentConfigServerParams['page']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEnvironmentConfigServerInfiniteQueryOptions(application,profile,params,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetEnvironmentConfigServerQueryOptions = <TData = Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEnvironmentConfigServerQueryKey(application,profile,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEnvironmentConfigServer>>> = ({ signal }) => getEnvironmentConfigServer(application,profile,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(application && profile), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEnvironmentConfigServerQueryResult = NonNullable<Awaited<ReturnType<typeof getEnvironmentConfigServer>>>
export type GetEnvironmentConfigServerQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetEnvironmentConfigServer<TData = Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params: undefined |  GetEnvironmentConfigServerParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnvironmentConfigServer<TData = Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getEnvironmentConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEnvironmentConfigServer<TData = Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get configuration environment
 */

export function useGetEnvironmentConfigServer<TData = Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 application: string,
    profile: string,
    params?: GetEnvironmentConfigServerParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEnvironmentConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEnvironmentConfigServerQueryOptions(application,profile,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Proxies requests to the underlying Spring Cloud Config Server actuator endpoints.
This allows access to Config Server management and monitoring endpoints.

 * @summary Proxy to Config Server actuator endpoint
 */
export const getActuatorEndpointConfigServer = (
    path: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetActuatorEndpointConfigServer200>(
      {url: `/api/config-server/actuator/${path}`, method: 'GET', signal
    },
      options);
    }
  



export const getGetActuatorEndpointConfigServerInfiniteQueryKey = (path?: string,) => {
    return [
    'infinite', `/api/config-server/actuator/${path}`
    ] as const;
    }

export const getGetActuatorEndpointConfigServerQueryKey = (path?: string,) => {
    return [
    `/api/config-server/actuator/${path}`
    ] as const;
    }

    
export const getGetActuatorEndpointConfigServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActuatorEndpointConfigServerInfiniteQueryKey(path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>> = ({ signal }) => getActuatorEndpointConfigServer(path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(path), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActuatorEndpointConfigServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>
export type GetActuatorEndpointConfigServerInfiniteQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetActuatorEndpointConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActuatorEndpointConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActuatorEndpointConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Proxy to Config Server actuator endpoint
 */

export function useGetActuatorEndpointConfigServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActuatorEndpointConfigServerInfiniteQueryOptions(path,options)

  const query = useInfiniteQuery(queryOptions, queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetActuatorEndpointConfigServerQueryOptions = <TData = Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActuatorEndpointConfigServerQueryKey(path);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>> = ({ signal }) => getActuatorEndpointConfigServer(path, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(path), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetActuatorEndpointConfigServerQueryResult = NonNullable<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>>
export type GetActuatorEndpointConfigServerQueryError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse


export function useGetActuatorEndpointConfigServer<TData = Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActuatorEndpointConfigServer<TData = Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>,
          TError,
          Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetActuatorEndpointConfigServer<TData = Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Proxy to Config Server actuator endpoint
 */

export function useGetActuatorEndpointConfigServer<TData = Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse>(
 path: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getActuatorEndpointConfigServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetActuatorEndpointConfigServerQueryOptions(path,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



