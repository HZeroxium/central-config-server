plugins {
    alias(libs.plugins.java)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

dependencyManagement {
    imports {
        mavenBom libs.spring.boot.bom.get().toString()
        mavenBom libs.spring.cloud.bom.get().toString()
    }
}

dependencies {
    // Spring Boot Starters
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.validation
    implementation libs.spring.boot.starter.data.mongodb
    implementation libs.spring.boot.starter.data.redis
    implementation libs.spring.boot.starter.cache
    
    // Spring Security OAuth2 Resource Server
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Log4j2 for logging (replaces Logback)
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    
    // Spring Cloud Config Server
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    
    // Spring Cloud Consul Discovery
    implementation libs.spring.cloud.starter.consul.discovery
    implementation libs.spring.cloud.starter.loadbalancer
    
    // Kafka
    implementation libs.spring.kafka
    implementation libs.kafka.clients
    
    // Redis & Caching
    implementation libs.lettuce.core
    implementation libs.caffeine
    
    // Micrometer & Observability
    implementation libs.bundles.micrometer
    // implementation libs.bundles.opentelemetry
    
    // Validation
    implementation libs.jakarta.validation.api
    
    // OpenAPI/Swagger
    implementation libs.springdoc.openapi.starter.webmvc.ui
    
    // Jackson
    implementation libs.bundles.jackson
    
    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    
    // Thrift
    implementation libs.thrift.lib
    implementation libs.javax.annotation.api
    
    // gRPC
    implementation 'io.grpc:grpc-netty-shaded:1.58.0'
    implementation 'io.grpc:grpc-protobuf:1.58.0'
    implementation 'io.grpc:grpc-stub:1.58.0'
    implementation 'io.grpc:grpc-services:1.58.0'  // For health check
    implementation 'com.google.protobuf:protobuf-java:3.24.4'
    implementation 'net.devh:grpc-spring-boot-starter:2.14.0.RELEASE'
    
    // etcd client (official Java client)
    implementation 'io.etcd:jetcd-core:0.8.5'
    implementation 'io.etcd:jetcd-common:0.8.5'
    
    // AspectJ for AOP profiling
    implementation libs.aspectjweaver
    
    // Datafaker for mock data generation
    implementation 'net.datafaker:datafaker:2.1.0'
    
    // Testing
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.bundles.testing
    testImplementation libs.spring.boot.testcontainers
    testImplementation libs.bundles.testcontainers
}

tasks.named('test') {
    useJUnitPlatform()
}

// Thrift generation
task generateThrift(type: Exec) {
    commandLine 'thrift', '--gen', 'java', '-out', 
        'build/generated/source/thrift/main/java', 'src/main/thrift/zcm_sdk.thrift'
    doFirst {
        mkdir('build/generated/source/thrift/main/java')
    }
}

// gRPC generation
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.24.4"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.58.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += ['build/generated/source/proto/main/grpc']
            srcDirs += ['build/generated/source/proto/main/java']
            srcDirs += ['build/generated/source/thrift/main/java']
        }
    }
}

compileJava.dependsOn generateThrift

// Docker build task
tasks.register('buildDocker', Exec) {
    group = 'build'
    description = 'Build Docker image for config-control-service'
    dependsOn 'bootJar'
    
    workingDir projectDir
    commandLine 'docker', 'build', 
        '-t', "hzeroxium/${project.name}:latest",
        '-t', "hzeroxium/${project.name}:${project.version}",
        '.'
    
    doFirst {
        println "Building Docker image: hzeroxium/${project.name}:latest"
    }
    
    doLast {
        println "Docker image built successfully: hzeroxium/${project.name}:latest"
    }
}
