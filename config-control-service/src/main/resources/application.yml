server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: config-control-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  cache:
    type: caffeine
  main:
    allow-bean-definition-overriding: true

  # MongoDB for metadata storage
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://mongodb:27017/config_control}
      auto-index-creation: true
    redis:
      url: ${REDIS_URL:redis://:redis123@redis:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Kafka for Spring Cloud Bus
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:kafka:9092}
    consumer:
      group-id: config-control-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
      properties:
        spring.json.add.type.headers: false

  # Spring Cloud Bus Configuration
  cloud:
    bus:
      enabled: true # Enable Spring Cloud Bus
      refresh:
        enabled: true # Enable configuration refresh
      destination: springCloudBus # Kafka topic name
      trace:
        enabled: true # Enable trace for debugging
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BROKERS:kafka:9092}
          auto-create-topics: true
          auto-add-partitions: true
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.StringSerializer
            value.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    consul:
      enabled: true
      host: ${CONSUL_HOST:consul}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: true
        register: true
        service-name: ${spring.application.name}
        health-check-critical-timeout: 30s

  # Mail Configuration (for Mailpit dev environment)
  mail:
    host: ${SPRING_MAIL_HOST:localhost}
    port: ${SPRING_MAIL_PORT:1025}
    username: ${SPRING_MAIL_USERNAME:}
    password: ${SPRING_MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    default-encoding: UTF-8
    test-connection: false

  # Thymeleaf Configuration
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false # Disable cache for development

  # Spring Security OAuth2 Resource Server configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://keycloak:8080/realms/config-control}
          audience: ${KEYCLOAK_AUDIENCE:config-control-service}
        health-check-interval: 10s
        health-check-timeout: 3s
        health-check-path: /actuator/health
        prefer-ip-address: true
        hostname: ${HOSTNAME:localhost}
        instance-id: ${spring.application.name}-${server.port}-${random.value}
        metadata:
          version: "1.0.0"
          thrift_port: ${thrift.server.port}
          grpc_port: ${grpc.server.port}
        tags:
          - config-control
          - management

# New Consul SDK Configuration
consulclient:
  consul-url: ${CONSUL_URL:http://consul:8500}
  token: ${CONSUL_TOKEN:}
  connect-timeout: 5s
  read-timeout: 10s
  write-timeout: 10s

# App configuration
app:
  name: config-control-service
  version: 1.0.0
  environment: ${ENVIRONMENT:development}

  # Metrics configuration
  metrics:
    enabled: true
    prefix: config_control
    tags:
      application: config-control-service
      service: config-control-service
    aspectj:
      enabled: true
      sampling-rate: 1.0
      include-parameters: false
    http:
      enabled: true
      track-payload-size: true
      track-response-size: true
    rpc:
      enabled: true
      thrift: true
      grpc: true
    cache:
      enabled: true
      track-hit-miss-ratio: true
      track-evictions: true
    business:
      enabled: true
      heartbeat: true
      drift: true
      config-refresh: true
      instance-count: true
      gauge-update-interval: 30s
    histogram:
      percentiles: [0.5, 0.75, 0.9, 0.95, 0.99]
      percentiles-histogram: true
      slo-boundaries: [10ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s]
      minimum-expected-value: 1ms
      maximum-expected-value: 1m
  cache:
    # provider: CAFFEINE  # Default to local cache
    provider: NOOP
    cache-name-prefix: "{spring.application.name:config-control-service}::"
    enable-fallback: true
    caffeine:
      maximum-size: 10000
      expire-after-write: 10m
      expire-after-access: 30m
      record-stats: true
    redis:
      default-ttl: 10m
      enable-statistics: true
      transaction-aware: true
      fallback-to-caffeine: true
    two-level:
      write-through: true
      invalidate-l1-on-l2-update: true
    caches:
      service-instances:
        ttl: 5m
        maximum-size: 10000
        allow-null-values: false
      drift-events:
        ttl: 2m
        maximum-size: 5000
        allow-null-values: false
      config-hashes:
        ttl: 10m
        maximum-size: 1000
        allow-null-values: false
      consul-services:
        ttl: 1m
        maximum-size: 500
        allow-null-values: false
      consul-health:
        ttl: 30s
        maximum-size: 1000
        allow-null-values: false

# Config Server client configuration
config-server:
  url: ${CONFIG_SERVER_URL:http://config-server:8888}
  timeout: 5000
  retry:
    max-attempts: 3
    backoff-delay: 1000

# Consul client configuration
consul:
  url: ${CONSUL_URL:http://consul:8500}
  timeout: 5000
  retry:
    max-attempts: 3
    backoff-delay: 1000

# RestClient timeout configuration
rest-client:
  connect-timeout: 5s
  read-timeout: 10s
  write-timeout: 10s
  clients:
    configserver:
      connect-timeout: 5s
      read-timeout: 10s
      write-timeout: 10s
    consul:
      connect-timeout: 5s
      read-timeout: 10s
      write-timeout: 10s

# Management/Actuator
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0 # For dev/testing - sample all traces
  otlp:
    tracing:
      endpoint: http://alloy:4318/v1/traces
    metrics:
      export:
        enabled: true
        url: http://alloy:4318/v1/metrics
        step: 15s
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    prometheus:
      enabled: true
    busrefresh:
      enabled: true
    metrics:
      enabled: true
  metrics:
    enable:
      jvm: true
      system: true
      web: true
      cache: true
      database: true
    tags:
      application: config-control-service
      service: config-control-service
      service.name: config-control-service
      environment: ${ENVIRONMENT:development}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        config_control.*.duration: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        config_control.*.duration: 0.5, 0.9, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        config_control.*.duration: 10ms, 50ms, 100ms, 200ms, 500ms, 1s
      exemplars:
        enabled: true
  health:
    redis:
      enabled: true
    mongo:
      enabled: false
    observability:
      enabled: false
  prometheus:
    metrics:
      export:
        enabled: true
        step: 15s

# Thrift Server Configuration
thrift:
  server:
    port: ${THRIFT_PORT:9090}

# gRPC Server Configuration
grpc:
  server:
    port: ${GRPC_PORT:9091}

# KV Store Configuration
kv:
  backend: ${KV_BACKEND:consul} # consul or etcd
  consul:
    base-url: ${KV_CONSUL_URL:http://consul:8500}
    wait: 5m
    token: ${KV_CONSUL_TOKEN:}
  etcd:
    endpoints:
      - ${KV_ETCD_ENDPOINTS:http://etcd:2379}
    connect-timeout: 5s
    keepalive-time: 10s
    namespace: ${KV_ETCD_NAMESPACE:}

# Service Instance Cleanup Configuration
service-instance:
  cleanup:
    enabled: false
    stale-threshold-minutes: 10
    cleanup-threshold-days: 30
    schedule-cron: "0 */5 * * * *" # Every 5 minutes

# Resilience4j Configuration
resilience4j:
  # Circuit Breaker Configuration
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 3s
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - com.example.control.api.exception.exceptions.ExternalServiceException
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException
          - java.lang.IllegalArgumentException
    instances:
      configserver:
        baseConfig: default
        failureRateThreshold: 50
        slowCallDurationThreshold: 5s
        waitDurationInOpenState: 30s
      consul:
        baseConfig: default
        failureRateThreshold: 50
        slowCallDurationThreshold: 3s
        waitDurationInOpenState: 20s
      keycloak:
        baseConfig: default
        failureRateThreshold: 60
        slowCallDurationThreshold: 5s
        waitDurationInOpenState: 40s
      email:
        baseConfig: default
        failureRateThreshold: 70
        waitDurationInOpenState: 60s
      mongodb:
        baseConfig: default
        failureRateThreshold: 50
        slowCallDurationThreshold: 3s
        waitDurationInOpenState: 30s
      kafka-producer:
        baseConfig: default
        failureRateThreshold: 50
        slowCallDurationThreshold: 5s
        waitDurationInOpenState: 30s

  # Retry Configuration with Exponential Backoff + Jitter
  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2.0
        enableRandomizedWait: true # Jitter
        randomizedWaitFactor: 0.5
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException
          - java.lang.IllegalArgumentException
          - com.example.control.api.exception.exceptions.ValidationException
    instances:
      configserver:
        baseConfig: default
        maxAttempts: 3
        waitDuration: 500ms
      consul:
        baseConfig: default
        maxAttempts: 3
        waitDuration: 300ms
      keycloak:
        baseConfig: default
        maxAttempts: 2
        waitDuration: 1s
      email-send:
        baseConfig: default
        maxAttempts: 3
        waitDuration: 1s

  # Bulkhead Configuration (Semaphore + ThreadPool)
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 25
        maxWaitDuration: 100ms
    instances:
      configserver:
        baseConfig: default
        maxConcurrentCalls: 20
      consul:
        baseConfig: default
        maxConcurrentCalls: 25
      keycloak:
        baseConfig: default
        maxConcurrentCalls: 15
      email:
        baseConfig: default
        maxConcurrentCalls: 10
      mongodb:
        baseConfig: default
        maxConcurrentCalls: 20
      kafka-producer:
        baseConfig: default
        maxConcurrentCalls: 15

  # ThreadPool Bulkhead Configuration
  thread-pool-bulkhead:
    configs:
      default:
        maxThreadPoolSize: 10
        coreThreadPoolSize: 5
        queueCapacity: 20
        keepAliveDuration: 20ms
    instances:
      configserver:
        baseConfig: default
        maxThreadPoolSize: 8
        coreThreadPoolSize: 4
      consul:
        baseConfig: default
        maxThreadPoolSize: 10
        coreThreadPoolSize: 5
      email:
        baseConfig: default
        maxThreadPoolSize: 5
        coreThreadPoolSize: 2

  # Time Limiter Configuration
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true
    instances:
      configserver:
        timeoutDuration: 5s
      consul:
        timeoutDuration: 3s
      keycloak:
        timeoutDuration: 5s
      email:
        timeoutDuration: 10s
      mongodb:
        timeoutDuration: 3s
      kafka-producer:
        timeoutDuration: 5s

  # Rate Limiter Configuration
  ratelimiter:
    configs:
      default:
        limitForPeriod: 50
        limitRefreshPeriod: 10s
        timeoutDuration: 100ms
    instances:
      heartbeat-endpoint:
        limitForPeriod: 50
        limitRefreshPeriod: 10s
        timeoutDuration: 0 # Fail immediately if limit exceeded
      admin-endpoints:
        limitForPeriod: 100
        limitRefreshPeriod: 10s

# Custom Resilience Properties
resilience:
  retry-budget:
    enabled: true
    window-size: 10s
    max-retry-percentage: 20 # Max 20% of requests can be retries within window
    per-service:
      configserver:
        max-retry-percentage: 20
      consul:
        max-retry-percentage: 25
      keycloak:
        max-retry-percentage: 15
  deadline-propagation:
    enabled: true
    default-timeout: 30s
    header-name: X-Request-Deadline

# Keycloak Admin client configuration (for optional IAM sync)
keycloak:
  admin:
    url: ${KEYCLOAK_ADMIN_URL:http://keycloak:8082}
    realm: config-control
    client-id: ${KEYCLOAK_CLIENT_ID:config-control-service}
    client-secret: ${KEYCLOAK_CLIENT_SECRET:}

# Springdoc OAuth2 configuration for Swagger UI
springdoc:
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  # use-fqn: true
  swagger-ui:
    oauth:
      client-id: admin-dashboard
      use-pkce-with-authorization-code-grant: true
    oauth2-redirect-url: http://localhost:8081/swagger-ui/oauth2-redirect.html

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.example.control: ${LOGGING_LEVEL_COM_EXAMPLE_CONTROL:DEBUG}
    org.springframework.web: INFO
    org.springframework.integration.handler.LoggingHandler: WARN
    org.springframework.cloud.stream.binder.kafka.KafkaMessageChannelBinder: WARN
    org.springframework.cloud.stream.binder.kafka: WARN
    org.springframework.cloud.util.random.CachedRandomPropertySource: WARN
    org.springframework.cloud: WARN
    org.springframework.security: DEBUG
  config: classpath:log4j2-spring.xml

# Data Seeding Configuration
seeding:
  enabled: false # Enable only in dev/seed-data profile
  auto-run-on-startup: false
  clean-before-seed: true
  data:
    teams:
      count: 2
      ids:
        - team1
        - team2
    services:
      team1-count: 3
      team2-count: 3
      orphan-count: 8 # Increased to support multi-user approval scenarios
    instances-per-service:
      min: 5
      max: 10
    drift-events:
      min-per-service: 2
      max-per-service: 5
    shares:
      count: 5
    approval-requests:
      pending: 3 # Multiple users competing for same services
      approved: 4 # Including cascade approvals and multi-gate
      rejected: 2 # Including cascade rejections
  admin:
    user-id: ${SEEDER_ADMIN_USER_ID:admin} # Default admin user ID from Keycloak
