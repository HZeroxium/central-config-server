// Root build.gradle
plugins {
    alias(libs.plugins.java)
    alias(libs.plugins.idea)
    alias(libs.plugins.spring.boot) apply false
    alias(libs.plugins.spring.dependency.management) apply false
}

// Common configuration for all subprojects
allprojects {
    group = 'com.example'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
        maven { url "https://packages.confluent.io/maven/" }
    }
    
    // Common Java configuration
    plugins.withType(JavaPlugin).tap {
        configureEach {
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger())
                }
            }
        }
    }
}

// Configuration for all subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    
    // Common dependencies
    dependencies {
        // Thrift dependencies
        implementation libs.thrift.lib
        compileOnly libs.javax.annotation.api
        
        // Kafka dependencies (common for all services)
        implementation libs.spring.kafka
        implementation libs.kafka.clients
        
        // Lombok
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        
        // Test dependencies
        testImplementation libs.junit.jupiter
        testImplementation libs.mockito.core
    }
    
    // Common test configuration
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
    
    // Common source sets
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
        }
        test {
            java.srcDirs = ['src/test/java']
            resources.srcDirs = ['src/test/resources']
        }
    }
}

// Task to build all modules
tasks.register('buildAll') {
    group = 'build'
    description = 'Build all modules'
    dependsOn ':user-thrift-server-service:user-contracts:build'
    dependsOn ':user-thrift-server-service:user-contracts:publishToMavenLocal'
    dependsOn ':user-rest-spring-service:build'
    dependsOn ':user-thrift-server-service:build'
    dependsOn ':user-watcher-service:build'
    if (project.findProject(':user-rpc-thrift-service') != null) {
        dependsOn ':user-rpc-thrift-service:build'
    }
}

// Task to clean all modules
tasks.register('cleanAll') {
    group = 'build'
    description = 'Clean all modules'
    dependsOn ':user-thrift-server-service:user-contracts:clean'
    dependsOn ':user-rest-spring-service:clean'
    dependsOn ':user-thrift-server-service:clean'
    dependsOn ':user-watcher-service:clean'
    if (project.findProject(':user-rpc-thrift-service') != null) {
        dependsOn ':user-rpc-thrift-service:clean'
    }
}

// Task to generate Thrift for all modules
tasks.register('generateThriftAll') {
    group = 'thrift'
    description = 'Generate Thrift classes for all modules'
    dependsOn ':user-thrift-server-service:user-contracts:generateThrift'
}

// Per-subproject docker build if Dockerfile exists
subprojects { sp ->
    tasks.register('dockerBuild', Exec) {
        group = 'docker'
        description = "Build Docker image for ${sp.name} if Dockerfile exists"
        workingDir sp.projectDir
        commandLine 'docker', 'build', '-t', "hzeroxium/${sp.name}:latest", '-f', 'Dockerfile', '.'
        onlyIf { file("${sp.projectDir}/Dockerfile").exists() }
    }
}

tasks.register('buildDocker') {
    group = 'docker'
    description = 'Build Docker images for all services'
    dependsOn 'buildAll'
    dependsOn subprojects.collect { it.tasks.named('dockerBuild') }
}
