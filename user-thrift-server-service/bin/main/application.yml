server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: user-thrift-server-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: user-thrift-server-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        isolation.level: read_committed
    producer:
      acks: all
      retries: 2147483647
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        enable.idempotence: true
        delivery.timeout.ms: 120000
    listener:
      ack-mode: record
      missing-topics-fatal: false

thrift:
  port: ${THRIFT_PORT:9090}
  server-name: thrift-server
  max-threads: 10
  min-threads: 2

app:
  name: user-thrift-server-service
  version: 1.0.0
  environment: ${ENVIRONMENT:development}
  rpc-timeout-seconds: 30
  max-pending-replies: 1000

kafka:
  topics:
    ping:
      request: ping.request
      response: ping.response
    user:
      create:
        request: user.create.request
        response: user.create.response
      get:
        request: user.get.request
        response: user.get.response
      update:
        request: user.update.request
        response: user.update.response
      delete:
        request: user.delete.request
        response: user.delete.response
      list:
        request: user.list.request
        response: user.list.response

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,env,beans,configprops,loggers,threaddump,heapdump,circuitbreakers,retries,timelimiters
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    prometheus:
      enabled: true
    metrics:
      enabled: true
  metrics:
    tags:
      application: user-thrift-server-service
      service: user-thrift-server-service
      environment: ${ENVIRONMENT:development}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        http.client.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        http.client.requests: 0.5, 0.9, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
        http.client.requests: 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
  health:
    circuitbreakers:
      enabled: true
    redis:
      enabled: true

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    com.example.thriftserver: ${LOGGING_LEVEL_COM_EXAMPLE_THRIFTSERVER:DEBUG}
    org.springframework.web: INFO
    org.apache.kafka: INFO
    io.micrometer: INFO
  config: classpath:log4j2-spring.xml

# Note: management section consolidated above

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      rpc-service:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        slow-call-rate-threshold: 80
        slow-call-duration-threshold: 15s
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.lang.Exception
  retry:
    instances:
      rpc-service:
        max-attempts: 3
        wait-duration: 500ms
        exponential-backoff-multiplier: 2.0
        retry-exceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.kafka.KafkaException
  timelimiter:
    instances:
      rpc-service:
        timeout-duration: 30s
        cancel-running-future: true
