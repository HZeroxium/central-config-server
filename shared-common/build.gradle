// shared-common/build.gradle

plugins {
    alias(libs.plugins.java)
    alias(libs.plugins.idea)
    alias(libs.plugins.spring.boot) apply false
    alias(libs.plugins.spring.dependency.management)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.get().toInteger())
    }
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.3.13'
    }
}

dependencies {
    // SLF4J for generated Thrift code
    implementation 'org.slf4j:slf4j-api'
    
    // Spring Boot dependencies for Kafka and common configs
    implementation libs.spring.boot.starter
    implementation libs.spring.kafka
    implementation libs.kafka.clients
    
    // Spring Cache + Redis for shared cache config
    implementation libs.spring.boot.starter.cache
    implementation libs.spring.boot.starter.data.redis
    implementation libs.lettuce.core
    implementation libs.caffeine
    
    // Jackson for JSON processing
    implementation libs.jackson.databind
    implementation libs.jackson.datatype.jsr310
    
    // Validation
    implementation libs.jakarta.validation.api

    // OpenAPI/Swagger annotations for DTOs
    implementation libs.swagger.annotations
    
    // Micrometer for shared profiling config
    implementation libs.micrometer.core
    implementation libs.micrometer.registry.prometheus
    
    // AOP for shared profiling config
    implementation libs.spring.aop
    implementation libs.aspectjweaver
    
    // Test dependencies
    testImplementation libs.junit.jupiter
    testImplementation libs.assertj.core
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter
    testImplementation libs.jakarta.validation.api
}

// Thrift version configuration
ext {
    thriftVersion = '0.22.0'
}

// Thrift source directory
def thriftSrcDir = file('src/main/thrift')

// Generated sources directory
def generatedSourcesDir = file('build/generated-sources/thrift')

// Source sets configuration
sourceSets {
    main {
        java {
            srcDirs = [
                'src/main/java',
                generatedSourcesDir
            ]
        }
        resources.srcDirs = ['src/main/resources']
    }
    test {
        java.srcDirs = ['src/test/java']
        resources.srcDirs = ['src/test/resources']
    }
}

// Thrift generation task
tasks.register('generateThrift', Exec) {
    group = 'thrift'
    description = 'Generate Java classes from Thrift definitions'
    
    inputs.dir(thriftSrcDir)
    outputs.dir(generatedSourcesDir)
    
    doFirst {
        generatedSourcesDir.mkdirs()
        if (!thriftSrcDir.exists()) {
            throw new GradleException("Thrift source directory does not exist: ${thriftSrcDir}")
        }
    }
    
    // Find thrift files
    def thriftFiles = []
    if (thriftSrcDir.exists()) {
        thriftSrcDir.eachFileRecurse { f ->
            if (f.isFile() && f.name.endsWith('.thrift')) {
                thriftFiles.add(f)
            }
        }
    }
    
    if (thriftFiles.isEmpty()) {
        // No thrift files found, create empty directory
        generatedSourcesDir.mkdirs()
        return
    }
    
    // Execute thrift for each file
    executable 'thrift'
    args '-r', '--gen', 'java', '-out', generatedSourcesDir.absolutePath
    args thriftFiles.collect { it.absolutePath }
}

// Compile Java depends on Thrift generation
compileJava {
    dependsOn tasks.named('generateThrift')
    options.encoding = 'UTF-8'
}

// Clean task to remove generated sources
clean {
    delete generatedSourcesDir
}

// JAR task to include generated sources
jar {
    from generatedSourcesDir
    archiveBaseName = 'shared-common'
    archiveVersion = version
}

// Publishing configuration (optional - for future use)
// publishing {
//     publications {
//         maven(MavenPublication) {
//             from components.java
//             groupId = group
//             artifactId = 'shared-thrift-definitions'
//             version = version
//         }
//     }
// }
